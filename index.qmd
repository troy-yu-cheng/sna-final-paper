---
title: "Social Network Analysis"
subtitle: "Structural Dynamics of Retweeter Amplification Backbone Networks: Analysis of COVID-19 Origin Misinformation on Twitter"
author: 
  - name: "Troy (Yu) Cheng"
    email: yc1317@georgetown.edu
    affiliation: Georgetown University
    corresponding: true
df-print: kable
title-block-banner: "#0a0e1a"
title-block-banner-color: "#4DB8FF"
execute:
  warning: false
date: 2025-04-28
date-modified: last-modified
format:
  html:
    embed-resources: true
    toc: true                 
    toc-title: "Contents"     
    toc-location: right       
    number-sections: true
    number-depth: 3       
    smooth-scroll: true       
    css: trycstyle.css 
    code-overflow: wrap
include-in-header:
  text: |
    <link rel="shortcut icon" href="assets/gu.ico" type="image/x-icon">           
highlight-style: nord       
engine: knitr
---

```{r}
#| include: false
library(tidyverse)
library(readr)
library(statnet)
library(reshape2)
library(effectsize)
```

# Abstract

The amplification of misinformation on social media remains a pressing concern, particularly when false narratives gain widespread visibility through the collective behaviors of retweeters themselves. This study reconceptualized retweeters not as passive intermediaries but amplification hubs within **Retweeter Amplification Backbone Networks**, and investigates how distinct co-retweeting behaviors produce structurally differentiated networks. Drawing on a cross-disciplinary framework of computer network architectures, this research examines: (1) **direct co-retweet networks**, where both retweeters retweeted the same misinformation tweet, analogous to structured overlay networks that rely on content replication and co-serving identical information objects, resulting in high connectivity but low subgroup cohesion; (2) **quote pathway co-retweet networks**, where both retweeters retweeted either the original misinformation tweet or tweets quoting it, resembling unstructured overlay networks with interest-based content forwarding that fosters localized interpretive communities; and (3) **reply pathway co-retweet networks** where both retweeters retweeted either the original misinformation tweet or tweets replying to it, mirroring event-driven publish-subscribe systems facilitating emotionally charged and interactive discussions across fragmented communities. Building on these distinctions, this study addresses the research question: ***How do different retweeter co-dissemination behaviors construct distinct amplification backbone network structures, and how do these structures vary temporally across multiple misinformation events related to the same narrative?*** Using Social Network Analysis (SNA), this study systematically compares structural characteristics—including network density, average degree, degree centralization, and clustering coefficient—across 18 retweeter amplification backbone networks, constructed from six misinformation events related to the same overarching topic on the COVID-19 Wuhan lab origin theory, and ordered chronologically to capture temporal variation in amplification dynamics.

\[pending\]our findings is:

*Keywords: Retweeter amplification backbone networks, collective misinformation amplification, social network analysis, Twitter, COVID-19 Wuhan lab origin theory*

------------------------------------------------------------------------

# Introduction

The rapid spread of misinformation on social media platforms presents serious challenges to public discourse and crisis management. In highly algorithmic environments, information flows are shaped by platform design and patterns of user engagement, which often give false narratives disproportionate visibility and influence (Vosoughi, Roy, & Aral, 2018). Prior research has primarily focused on user-level analyses of misinformation diffusion networks, often conceptualizing retweeters as mere transmission nodes within broader diffusion chains (Guarino et al., 2020; Pierri et al., 2020; Shao et al., 2018). However, this perspective rarely considers how retweeters, as a collective, construct structural backbones that sustain and amplify misinformation narratives through coordinated or patterned co-amplification behaviors. This study introduces the concept of Retweeter Amplification Backbone Networks to foreground retweeters not merely as passive intermediaries but as structurally significant agents whose collective behaviors shape the persistence and amplification potential of misinformation. By systematically examining how distinct co-dissemination behaviors construct the topologies of these backbone networks, this research addresses a critical blind spot in existing misinformation studies.

To understand these structural patterns, this study applies a cross-disciplinary framework informed by concepts from computer network engineering. It analyzes how different forms of retweeter engagement shape the structural features of amplification networks, including direct co-retweeting, co-retweeting on quote pathway and co-retweeting on reply pathway. Each behavior is defined as a distinct mode of information transmission. Direct co-retweet networks corresponds to structured overlay networks, where content-serving nodes collaboratively replicate and distribute identical information objects to maximize availability and redundancy. Quote pathway co-retweet networks resembles unstructured overlay networks, in which interest-based content forwarding enables the emergence of localized interpretive communities centered around reframed narratives. reply pathway co-retweet networks operates analogously to event-driven publish-subscribe systems, facilitating emotionally charged and interactive discussions across fragmented conversational clusters (Kurose & Ross, 2021; Barabási, 2016; Forouzan, 2013; Tanenbaum, 2011). This interdisciplinary perspective provides a conceptual framework to understand the organizational logic of retweeter amplification backbones and guides the development of theoretically grounded falsifiable hypotheses regarding the distinct structural outcomes associated with different co-retweeting behaviors.

Using Social Network Analysis, this study examines network density, average degree, centralization, and clustering to compare the structural characteristics of retweeter amplification backbones formed through each engagement behavior. Statistical tests, including t-tests and Conditional Uniform Graph (CUG) models, are used to assess whether observed network patterns differ significantly across these behaviors. Exploratory network modeling is also used to examine structural tendencies within these networks. The empirical focus of this study is a series of six misinformation claims related to the [COVID-19 Wuhan lab origin theory](https://en.wikipedia.org/wiki/COVID-19_lab_leak_theory), spanning from March 2020 to August 2021. This sequence enables an opportunity to explore not only structural differences across co-dissemination behaviors but also temporal variations in retweeter amplification backbones within a unified misinformation narrative. In total, eighteen retweeter amplification backbone networks are analyzed—three amplification pathways across six misinformation events—providing critical insights into how collective retweeter behaviors evolve in response to emerging misinformation waves.

# Literature Review

## Misinformation Amplification on Social Media

The amplification of misinformation on social media has emerged as a critical concern in contemporary communication environments, particularly during crisis events such as the COVID-19 pandemic. Unlike traditional media ecosystems, where information flows are subject to editorial control and verification processes, social media platforms enable the rapid and often unchecked spread of false information. This phenomenon is primarily driven by the psychological appeal of misinformation, which frequently exhibits high levels of novelty and emotional resonance (Vosoughi, Roy, & Aral, 2018). Such content which can stimuli users' "intuitive or emotional thinking" is more likely to capture user attention and prompt sharing behaviors (Pennycook et al., 2021), thereby accelerating its diffusion .

At the platform level, algorithmic curation further intensifies this process by privileging content that maximizes user engagement (Fernández et al., 2021). Algorithms systematically prioritize emotionally charged content—especially narratives evoking fear, outrage, or moral indignation—because such content generates more interactions and keeps users engaged (Brady et al., 2017; Cinelli et al., 2021). As a consequence, users are frequently exposed to information that reinforces their existing beliefs, creating self-reinforcing informational environments commonly referred to as “echo chambers” (Del Vicario, Vivaldo, et al., 2016; Guess, Nagler, & Tucker, 2019). In such environments, misinformation becomes more resistant to correction, and its visibility is artificially sustained by both user behavior and algorithmic design.

The COVID-19 pandemic exemplified the societal risks associated with this dynamic. Empirical analyses revealed that misinformation regarding COVID-19 health measures and virus origins often spread more rapidly and reached wider audiences than verified scientific information, complicating public health responses and crisis communication strategies (Cinelli et al., 2020). In response, the World Health Organization introduced the concept of an “infodemic” to describe the overabundance of information—both accurate and misleading—that impedes informed decision-making during public health emergencies (World Health Organization, 2020).

While considerable research has explored the psychological drivers of misinformation spread and the algorithmic mechanisms that reinforce it, less attention has been devoted to understanding the structural foundations that sustain its amplification at the collective level. Despite increasing scholarly interest, the underlying structural mechanisms through which misinformation narratives persist and gain visibility remain insufficiently understood. This gap necessitates a closer examination of how user behaviors aggregate into network structures that contribute to the endurance and reach of misinformation narratives across time.

## Retweeters as Structural Amplifiers

While the amplification of misinformation on social media has been extensively studied, much of the existing literature primarily focuses on two areas: the dynamics of information diffusion through cascade models and the influential role of key individuals in spreading content.

Cascade models (like epidemiological model SIR) conceptualize information spread as a chain of user-to-user transmissions, where each retweet or share is a probabilistic response to prior exposure. These models often treat retweeters as homogeneous units within the transmission chain, lacking individual or structural specificity (Goel, Kamesh Munagala, et al., 2015; Goel, Anderson, et al., 2015; Kupavskii et al., 2012). Parallel research has examined the role of influencers in amplifying misinformation, emphasizing users with large follower bases or high centrality in networks (Flaherty & Mangan, 2025). This approach tends to reduce amplification to a function of individual-level reach (Gallagher, 2022), overlooking how groups of retweeters may collectively shape the visibility and longevity of misinformation through patterned co-engagement (Shao et al., 2018).

Recent studies have begun to explore coordinated behaviors among social media users, particularly in the context of political messaging and misinformation. For instance, Pacheco et al. (2021) introduced methods to detect groups of accounts engaging in synchronized activities, highlighting their role in boosting the exposure of low-credibility content. However, such work often focuses on malicious coordination (e.g., bots or trolls) and still rarely treats retweeters as a distinct analytic category whose structural connections can be meaningfully analyzed. Despite the growing recognition of structural factors in misinformation diffusion, few studies have examined how retweeters themselves—rather than influencers or message originators—form behavioral linkages that serve as amplification backbones. Retweeters are typically treated as anonymous nodes of replication, yet they may form emergent structures through co-dissemination behaviors such as retweeting the same misinformation or retweeting content that quotes or replies to it. These patterns of shared engagement, even when uncoordinated or unintentional, may constitute the behavioral core of sustained amplification.

This study addresses this overlooked area by conceptualizing retweeters not merely as transmission endpoints but as structurally significant actors who collectively construct amplification backbones. By shifting the analytical focus from individual influence to networked behavioral convergence, this research proposes a new framework for understanding the organizational logic that sustains misinformation in social media environments.

## From Co-Dissemination Behaviors to Retweeter Amplification Backbone Networks

While prior research has extensively examined the roles of influencers and coordinated actors in the spread of misinformation (Shao et al., 2018; Pacheco et al., 2021; Weber & Neumann, 2021), the structural dynamics formed by ordinary users through shared behaviors remain underexplored. This study addresses this gap by focusing on retweeters—users who engage in similar amplification behaviors without explicit coordination.

Specifically, we differentiate among three forms of co-dissemination behaviors: (1) direct co-retweet networks, which establish edges between two retweeters if both have retweeted the exact same misinformation tweet; (2) quote pathway co-retweet networks, which form edges between two retweeters if both have retweeted either the original misinformation tweet or any tweet explicitly quoting it; and (3) reply pathway co-retweet networks, which form edges when two retweeters have either retweeted the original misinformation tweet or a tweet explicitly replying to it.This systematic distinction advances the field by offering a behavioral lens to study how different user interactions shape amplification backbones.

By examining these networks across six distinct misinformation claims of the same topic at different temporal stage, we aim to analyze the structural characteristics of the retweeter amplification backbones formed through co-dissemination behaviors, focusing on metrics such as network density, centralization and clustering coefficient. This approach aligns with the growing recognition that structural configurations, rather than merely individual-level factors, critically influence the dynamics of misinformation diffusion (Centola, 2010; Centola & Macy, 2007).

Our analysis also introduces an interdisciplinary analogy drawn from computer network architectures to explain how different co-dissemination behaviors generate distinct structural backbones. Similar to how distributed, serial, and collapsed backbone architectures manage information flow in communication networks (Stallings, 2007), these retweeter networks exhibit varying levels of connectivity and centralization based on the behavioral pathways involved. Such analogies provide a conceptual model for interpreting why direct retweet networks may produce denser, more clustered structures, while quote and reply pathways introduce more fragmented or decentralized patterns of amplification. By shifting the analytical focus from individual influencers to collective behavioral convergence, this study offers a novel perspective on the structural mechanisms that underpin misinformation resilience and visibility in social media environments.

# Research Method

## Data Collection and Preparation

This study employs secondary data from the [MuMiN Project](https://mumin-dataset.github.io/) (Multilingual Misinformation Influence Network), publicly available at [University of Bristol Data Repository](https://data.bris.ac.uk/datasets/23yv276we2mll25fjakkfim2ml/mumin.zip). The dataset includes detailed records of retweeter IDs, tweet IDs, misinformation claims, content metadata, and timestamps associated with the dissemination of misinformation.

According to the dataset documentation (Nielsen & McConville, 2022), the date variable represents the `date` a misinformation claim was originally uttered. When this information was unavailable, the date of fact-check reviews or an extracted date from URLs using regular expressions was used to approximate the timeline. After downloading the dataset, all compressed `.pkl` files were converted into `.csv` format to facilitate analysis in R. This process involved using a Python script to batch convert files and organize them into a structured directory for subsequent processing.

Following data preparation, key relational tables including `user interactions`, tweet misinformation claim mappings, and retweeter relationships were imported into R. These datasets were then cleaned, merged, and filtered to isolate relevant misinformation narratives for this study. To focus the analysis, this research examines misinformation narratives specifically related to the claim that [**COVID-19 was deliberately created or manufactured by China or a laboratory in Wuhan**](https://en.wikipedia.org/wiki/COVID-19_lab_leak_theory). A series of keyword filters targeting terms such as `china` and `wuhan` were applied to identify relevant records. Manual selection of misinformation topics further refined the dataset to include only those narratives directly linked to the COVID-19 origin conspiracy.

Final filtering retained only `misinformation` content labeled as such by dataset curators and limited the language scope to `English`, resulting in a focused set of 112 unique retweeter nodes forming the basis for subsequent network construction and analysis. The resulting dataset provides a focused sample of misinformation narratives suitable for constructing amplification backbone networks and conducting structural analysis.

## Conceptualize Nodes and Edges

This study conceptualizes individual retweeters—users actively involved in the redistribution of misinformation—as foundational nodes within larger meta-networks of amplification. These retweeter-centric networks, or amplification backbones, illustrate how collective user behaviors construct structural conditions that facilitate the amplification of misinformation, independent of the message content itself (Barabási, [2016](https://www.cambridge.org/fr/academic/subjects/physics/statistical-physics/network-science?format=HB&isbn=9781107076266)). Each retweeter is represented as a node, and edges are defined through three distinct co-retweeting behaviors based on shared and repeated amplification actions.

To analytically frame these behavioral patterns, this study applies a cross-disciplinary perspective inspired by computer network engineering. Specifically, it draws from established backbone architectures to explain how different user behaviors generate distinct network topologies. In this analogy, retweeter nodes correspond to high-capacity content distribution nodes in computer networks, and edges represent logical connections based on repeated and collective behaviors rather than direct communication. This perspective enables the derivation of structural expectations from well-studied computer network configurations, providing empirical grounding for the interpretation of network metrics (Stallings, 2020; Kurose & Ross, 2021).

### Direct Co-Retweet Network

Edges in the direct co-retweet network are established when both retweeter nodes co-rebroadcasted the exact same misinformation tweet. This behavior reflects the most immediate and unfiltered form of amplification, characterized by synchronous and highly reactive user engagement.

In this conceptualization, retweeter nodes directly correspond to content storage and distribution nodes within structured overlay networks, particularly those utilizing Distributed Hash Tables (DHTs) such as [Chord](https://codethechange.stanford.edu/guides/guide_kademlia.html#hash-table-partitions-chord) and [Kademlia](https://codethechange.stanford.edu/guides/guide_kademlia.html#search-tree-partitions-kademlia). In DHT architectures, these nodes function as decentralized content servers responsible for both storing and delivering specific content objects identified by unique hash values (Stoica et al., 2001). These nodes do not operate in isolation; rather, they co-replicate and co-serve identical content objects to maintain system redundancy and ensure reliable content delivery across the network.

Applying this analogy, retweeters who repeatedly amplify the same misinformation tweet behave like DHT content-serving nodes co-replicating identical content, thereby creating a densely interconnected network focused on a singular information artifact.

From this architectural perspective, the direct co-retweet network is expected to exhibit high density because, similar to DHT systems, many nodes (retweeters) converge on a small set of highly popular content (i.e., viral misinformation tweets), creating numerous redundant amplification paths.

Despite this density, degree centralization is likely moderate. In DHT systems, content is distributed across multiple nodes to prevent bottlenecks and avoid over-reliance on a few central servers. Similarly, in direct co-retweet networks, while certain tweets become focal points of amplification, the behavior remains horizontally distributed across a wide base of users rather than dominated by a small number of influential accounts (Stoica et al., 2001; Barabási, 2016).

Finally, the clustering coefficient is expected to be low. In structured overlay networks, connections between nodes are primarily functional, aimed at ensuring content redundancy and availability, rather than fostering persistent or socially cohesive relationships. Analogously, direct co-retweet ties arise from event-driven, momentary reactions rather than long-term relational bonds, leading to lower tendencies for triadic closure (Newman, 2010).

### Quote Pathway Co-Retweet

Edges in the quote pathway co-retweet network are established when both retweeter nodes co-rebroadcasted either the original misinformation tweet or tweets explicitly quoting it. This behavior introduces a narrative transformation layer, where misinformation is not merely repeated but is actively reframed and recontextualized to align with diverse ideological perspectives or emotional appeals (Papacharissi & de Fatima Oliveira, 2012).

In this framework, retweeter nodes correspond to interest-based content forwarding nodes within unstructured overlay networks, such as Gnutella. In these systems, nodes act as content relay agents that do not store identical content but participate in distributing a variety of thematically related content based on shared interests (Ripeanu et al., 2002). Unlike the strict key-based routing in DHT architectures, unstructured overlay nodes dynamically establish logical connections through co-rebroadcasting thematically reframed content, enabling flexible and adaptive information flows across loosely connected communities.

Applying this analogy, retweeters in the quote pathway network collectively function as nodes that co-rebroadcast reinterpretations and narrative adaptations of the original misinformation. These nodes amplify the content by embedding personal commentary, ideological alignment, or emotional cues, thereby facilitating the spread of misinformation through diversified narrative framings.

From this architectural perspective, the quote pathway co-retweet network is expected to exhibit moderate density. In unstructured overlay networks, the lack of strict routing protocols results in less efficient but highly adaptive content diffusion. Similarly, retweeters engaging in quote behaviors introduce selective filters into the amplification process by choosing to reinterpret rather than directly repeat misinformation, which reduces indiscriminate propagation and leads to a moderately connected network structure (Kurose & Ross, 2021).

Degree centralization in these networks is anticipated to be moderate to high. Just as unstructured overlays often develop influential content relay nodes that facilitate content discovery across fragmented clusters, certain retweeters emerge as key reframers whose reinterpretations resonate broadly and are frequently co-rebroadcasted by others (Papacharissi, 2015). These influential reframers act as thematic intermediaries, shaping how misinformation narratives evolve and gain traction across diverse audience segments.

The clustering coefficient is expected to be moderate to high. Quoting behavior inherently fosters the formation of localized interpretive communities, where users repeatedly engage with others who share similar narrative framings. As these communities grow around influential reframers, the likelihood of triadic closure increases, resulting in tightly interconnected subgroups centered around dominant ideological or rhetorical interpretations of misinformation. This process parallels the formation of interest-based virtual clusters in unstructured overlay networks, where nodes dynamically self-organize into topical communities that facilitate more frequent information exchange within shared thematic spaces (Ripeanu et al., 2002; Kurose & Ross, 2021).

### Reply Pathway Co-Retweet

Edges in the reply pathway co-retweet network are established when both retweeter nodes co-rebroadcasted either the original misinformation tweet or tweets explicitly replying to it. This behavior represents a higher level of interactive and emotionally charged engagement, often characterized by public debates, affective reactions and attempts to contest or reinforce misinformation narratives through conversational exchanges (Zade et al., 2023).

In this framework, retweeter nodes correspond to event-driven content dissemination nodes within publish-subscribe overlay networks, commonly used in large-scale messaging and event notification systems (Eugster et al., 2003). In these networks, nodes act as dynamic topic subscribers and content distributors, temporarily forming logical links around emerging events or high-salience topics. These connections are not based on long-term content interests but arise from short-lived, event-driven participation, where both nodes co-respond and co-rebroadcast reactions to the same triggering event or emotionally provocative content.

Applying this analogy, retweeters in the reply pathway network function as emotionally responsive nodes that collectively amplify misinformation by engaging with its conversational offshoots. Rather than focusing on content repetition or reframing, these nodes sustain misinformation visibility by perpetuating discussions, arguments, and emotional exchanges surrounding the original falsehood.

From the perspective of network structure, the reply pathway co-retweet network is expected to exhibit low global density but high local clustering. In publish-subscribe systems, event-driven subscriptions typically lead to the formation of tight, short-term clusters centered on specific topics, while the broader network remains fragmented and loosely connected (Kurose & Ross, 2021). Similarly, reply-based amplification produces concentrated bursts of interaction within reply chains, resulting in localized conversational hubs where misinformation narratives are repeatedly discussed and emotionally reinforced.

Degree centralization is anticipated to be moderate to high in localized regions, as certain retweeters emerge as conversational focal points, repeatedly attracting replies and reactions from diverse user groups. These users function similarly to topic brokers or message routers in publish-subscribe systems, facilitating the circulation of emotionally charged content across otherwise disconnected segments of the network (Stallings, 2020).

Finally, the clustering coefficient is expected to be high within local discussion clusters but low at the global level. Emotional and dialogic exchanges foster the rapid formation of tightly knit conversational groups, but these groups often remain isolated from one another, contributing to a fragmented global network structure with long average path lengths and high network diameter (Newman, 2010).

------------------------------------------------------------------------

This study systematically maps the structural characteristics of retweeter amplification backbones to corresponding computer network architectures. This interdisciplinary mapping clarifies how collective user behaviors in misinformation spread resemble established content dissemination patterns in technical communication systems.

| Retweeter Network Type | Node Definition (Social Media) | Edge Definition (Social Media) | Analogous Network Architecture | Mapped Node Function (Computer Network) | Mapped Edge Definition (Computer Network) | Expected Structural Characteristics |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| Direct Co-Retweet Network | Retweeters who retweeted the exact same misinformation tweet | Both nodes co-rebroadcasted the identical misinformation tweet | Structured Overlay (DHT: Chord, Kademlia) | Content storage and distribution nodes (DHT content servers) | Both nodes co-replicate and co-serve identical content objects | High Density; Moderate Centralization; Low Clustering |
| Quote Pathway Co-Retweet | Retweeters who retweeted either the original misinformation tweet or tweets quoting it | Both nodes co-rebroadcasted reframed versions of misinformation content | Unstructured Overlay (e.g., Gnutella) | Interest-based content relay nodes (content forwarders) | Both nodes co-rebroadcast reinterpretations derived from the same original content | Moderate Density; Moderate-High Centralization; Moderate-High Clustering |
| Reply Pathway Co-Retweet | Retweeters who retweeted either the original misinformation tweet or tweets replying to it | Both nodes co-rebroadcasted emotional or conversational reactions to misinformation | Publish-Subscribe Overlay (Event-Driven Systems) | Event-driven topic subscribers and brokers | Both nodes co-respond and co-rebroadcast reactions to the same triggering event | Low Density; Moderate-High Local Centralization; High Local Clustering; High Network Diameter |

This framework offers a theoretical basis for predicting the structural properties of misinformation networks and guides the subsequent empirical analysis of network metrics.

## Research Question and Hypotheses

This study explores how different retweeter co-dissemination behaviors shape the structural properties of misinformation amplification backbones and whether these structural characteristics vary across different stages of misinformation dissemination. Specifically, it addresses the following research question: **How do different retweeter co-dissemination behaviors construct distinct amplification backbone network structures, and how do these structures vary temporally across multiple misinformation claims related to the same topic?**

Based on the conceptual framework and theoretical analogies developed in nodes and edges conceptualization, the following hypotheses are proposed to systematically examine structural differences across the three network types. Although each hypothesis focuses on a specific structural metric as the dependent variable, the independent variable (co-dissemination behavior) involves three categorical conditions, requiring appropriate comparative statistical methods.

### Structural Differences Across Network Types

**H1 (Density):** *Direct co-retweet networks are expected to exhibit the highest density, followed by quote pathway and reply pathway networks, reflecting the immediacy and redundancy of direct amplification.*

**H2 (Transitivity):** *Quote pathway co-retweet networks will exhibit the highest transitivity among the three network types, indicating a greater tendency for localized interpretive clustering through narrative reframing.*

**H3 (Degree Centralization):** *Reply pathway co-retweet networks are expected to demonstrate higher local degree centralization compared to direct and quote pathway networks, reflecting the dominance of conversational hubs in emotionally charged discussions.*

**H4 (Average Path Length):** *Reply pathway co-retweet networks will have longer average path lengths than the other two network types, suggesting more fragmented conversational clusters and less efficient information flow.*

### Temporal Variations in Network Structures

**H5 (Temporal Structural Change):** *The structural properties of amplification backbones, including density, transitivity, degree centralization, and average path length, will vary significantly across misinformation lifecycle stages. Networks formed during earlier events are expected to differ structurally from those emerging in later stages, indicating shifts in amplification dynamics over time.*

## Network Evaluation Metrics and Operationalization

### SNA Metrics

This study operationalizes its theoretical framework through Social Network Analysis (SNA), systematically evaluating the structural characteristics of retweeter amplification backbones. Drawing on established network science methodologies (Freeman, 1979; Wasserman & Faust, 1994; Newman, 2010), four key network-level metrics are computed to assess how different co-dissemination behaviors influence amplification structures.

Network density is calculated to capture the overall intensity of amplification by measuring the ratio of realized edges to all possible edges. Higher density indicates more frequent co-amplification behaviors and reflects the immediacy and redundancy of information spread, particularly expected in direct co-retweet networks.

Transitivity, measured through the global clustering coefficient, evaluates the extent to which retweeters form tightly interconnected subgroups. This metric highlights localized amplification dynamics, providing insight into the emergence of interpretive communities, especially within quote pathway networks.

Degree centralization, based on Freeman’s centralization index, assesses the concentration of amplification behaviors around highly active nodes. This measure helps identify dominant amplifiers and the presence of hierarchical structures, which are hypothesized to be more pronounced in reply pathway networks due to emotionally charged conversational hubs.

Average path length is computed to assess the efficiency of information flow, representing the average number of steps required to connect any two nodes. Longer path lengths suggest fragmented amplification structures, often observed in emotionally driven reply pathway networks where conversations are dispersed across loosely connected clusters.

### Hypothesis Testing Strategy

Structural metrics are computed for each of the 18 amplification backbone networks. To examine the proposed hypotheses (H1–H5), one-way ANOVA is used to test differences across the three network types for each structural metric. Where appropriate, post-hoc pairwise t-tests with Bonferroni correction are applied to further investigate group-level distinctions.

All hypothesis tests are conducted at a significance level of p \< 0.05. In addition to hypothesis testing, Conditional Uniform Graph (CUG) tests are employed to assess whether the observed network metrics—specifically density, transitivity, degree centralization, and average path length—deviate significantly from expectations based on random network configurations. The CUG tests condition on network size to ensure fair comparisons by holding the number of actors constant, allowing the analysis to focus on whether the observed structural patterns result from purposeful amplification behaviors rather than random chance (Faust, 2006).

This combined approach integrates both statistical hypothesis testing and baseline comparisons against random models, providing a more comprehensive understanding of the structural characteristics of retweeter amplification backbone networks.

## Tools

All data processing, network construction, and statistical analyses were conducted using RStudio (version ≥ 4.0.0). Data manipulation and visualization primarily relied on the `tidyverse` ecosystem, with `readr` used for efficient data import and preprocessing. Network modeling and the computation of structural metrics were performed using the `statnet` package, while `reshape2` facilitated data restructuring for network matrix construction and analysis.

For statistical hypothesis testing, including the calculation of descriptive statistics, t-tests, and ANOVA models, the base `stats` package was employed. Effect sizes accompanying statistical tests were calculated using the `effectsize` package to provide additional insight into the practical significance of the results.

The initial data preparation phase was completed using Python through **Visual Studio Code**, where raw data files from the MuMiN project were converted from `.pkl` to `.csv` formats. This conversion enabled seamless integration of the data into R for subsequent network analysis.

# Results

This study investigates the structural characteristics of retweeter amplification backbone networks by examining five hypotheses concerning structural differences across network types and temporal stages, followed by a Conditional Uniform Graph (CUG) analysis to explore whether the observed network configurations deviate significantly from random graph expectations.

The analysis began by assessing whether direct co-retweet networks exhibit higher density than quote and reply pathway networks, as hypothesized. Descriptive statistics indicated that direct co-retweet networks tended to display higher density values across most stages, particularly during the early stages of misinformation dissemination. For instance, in Stage 2, the density of direct co-retweet networks reached 0.0676, while both quote and reply pathway networks exhibited identical but lower densities of 0.0676, which quickly dropped in later stages to as low as 0.0016 in Stage 6. However, despite these apparent differences, a one-way ANOVA did not confirm their statistical significance. The test produced an F-statistic of 0.158 with a p-value of 0.855, indicating no statistically significant differences across network types. The detailed ANOVA results are presented in Table 1.

**Table 1. ANOVA Results for Network Density**

| Source       | Df  | Sum Sq   | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|----------|----------|---------|---------|
| Network_Type | 2   | 0.000221 | 0.000110 | 0.158   | 0.855   |
| Residuals    | 15  | 0.010488 | 0.000699 |         |         |

The second hypothesis posited that quote pathway networks would exhibit higher local transitivity, reflecting stronger localized clustering through narrative reframing. Contrary to this expectation, descriptive data showed that direct co-retweet networks exhibited the highest local transitivity values in the early stages, reaching 0.3661 in Stage 2, while quote pathway networks only reached 0.3661 during the same stage and quickly declined thereafter. Despite these patterns, the ANOVA test produced an F-statistic of 0.268 with a p-value of 0.769, indicating no significant difference in local transitivity across network types (Table 2).

**Table 2. ANOVA Results for Local Transitivity**

| Source       | Df  | Sum Sq  | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|---------|----------|---------|---------|
| Network_Type | 2   | 0.00952 | 0.004759 | 0.268   | 0.769   |
| Residuals    | 15  | 0.26652 | 0.017768 |         |         |

For the third hypothesis, which anticipated higher degree centralization in reply pathway networks due to the dominance of conversational hubs, descriptive patterns again did not support this claim. Degree centralization remained consistently low across all network types, peaking at just 0.1325 for all three network types in Stage 2 before declining to near zero in subsequent stages. The ANOVA confirmed the lack of statistically meaningful variation, returning an F-statistic of 0.151 with a p-value of 0.861 (Table 3).

**Table 3. ANOVA Results for Degree Centralization**

| Source       | Df  | Sum Sq  | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|---------|----------|---------|---------|
| Network_Type | 2   | 0.00082 | 0.000409 | 0.151   | 0.861   |
| Residuals    | 15  | 0.04061 | 0.002707 |         |         |

The fourth hypothesis predicted that reply pathway networks would exhibit longer average path lengths due to more fragmented conversational structures. While average path lengths peaked slightly for reply pathway networks during the early stages—reaching 0.8824 in Stage 2—they did not differ substantially from those observed in direct and quote pathway networks. The ANOVA again failed to detect statistically significant differences, with an F-statistic of 0.830 and a p-value of 0.455, as summarized in Table 4.

**Table 4. ANOVA Results for Average Path Length**

| Source       | Df  | Sum Sq | Mean Sq | F value | Pr(\>F) |
|--------------|-----|--------|---------|---------|---------|
| Network_Type | 2   | 0.1577 | 0.07883 | 0.830   | 0.455   |
| Residuals    | 15  | 1.4240 | 0.09493 |         |         |


The analysis further explored whether the structural properties of amplification backbones exhibited temporal variation across different stages of misinformation dissemination. To systematically investigate these patterns, the six temporal stages identified in the dataset were grouped into two broader periods representing the early and late phases of the misinformation lifecycle. As detailed in Table 5, the early period includes events from March to June 2020, which correspond to the initial outbreak and widespread dissemination of the COVID-19 lab-leak theory. The late period captures reactivation events occurring between January and August 2021, reflecting sustained but diminished discussions surrounding these narratives. This temporal segmentation facilitates a clearer comparison between the intense early amplification dynamics and the subsequent phases of continued but less active dissemination.

**Table 5. Temporal Segmentation of Misinformation Events**

| Date       | Keywords                                  | Assigned Stage | Period |
| ---------- | ----------------------------------------- | -------------- | ------ |
| 2020-03-26 | coronavirus released china                | Stage 1        | Early  |
| 2020-04-26 | honjo said china manufactured coronavirus | Stage 2        | Early  |
| 2020-04-26 | covid 19 disease manufactured china       | Stage 3        | Early  |
| 2020-06-11 | doctor claimed coronavirus china create   | Stage 4        | Early  |
| 2021-01-19 | covid 19 lab china                        | Stage 5        | Late   |
| 2021-08-03 | concluded covid leaked wuhan lab          | Stage 6        | Late   |


Following this segmentation, Welch Two-Sample t-tests were conducted to assess whether the structural metrics—density, local transitivity, degree centralization, and average path length—differed significantly between the early and late periods. Although visual inspection of the temporal trends suggested that networks formed during the early stages exhibited higher density, greater local clustering, and increased centralization, these patterns did not achieve statistical significance. The detailed t-test results are presented in Table 6.

**Table 6. Welch Two-Sample t-Test Results for Temporal Changes**

| Metric | Network Type | t | df | p-value | 95% CI |
|------------|------------|------------|------------|------------|------------|
| Density | Direct Co-Retweet | 1.9669 | 3.0486 | 0.1424 | \[-0.0171, 0.0739\] |
|  | Quote Path Co-Retweet | 1.1986 | 3.0021 | 0.3167 | \[-0.0314, 0.0695\] |
|  | Reply Path Co-Retweet | 1.1842 | 3.0196 | 0.3211 | \[-0.0312, 0.0685\] |
| Local Transitivity | Direct Co-Retweet | 2.565 | 3.3308 | 0.0746 | \[-0.0277, 0.3466\] |
|  | Quote Path Co-Retweet | 1.3225 | 3.0189 | 0.2773 | \[-0.1467, 0.3566\] |
|  | Reply Path Co-Retweet | 1.3784 | 3.0704 | 0.2599 | \[-0.1456, 0.3733\] |
| Degree Centralization | Direct Co-Retweet | 1.9661 | 3.0376 | 0.1428 | \[-0.0332, 0.1456\] |
|  | Quote Path Co-Retweet | 1.1968 | 3.0019 | 0.3173 | \[-0.0619, 0.1367\] |
|  | Reply Path Co-Retweet | 1.1918 | 3.0161 | 0.3186 | \[-0.0613, 0.1349\] |
| Average Path Length | Direct Co-Retweet | 1.5272 | 2.1098 | 0.2600 | \[-0.5508, 1.2060\] |
|  | Quote Path Co-Retweet | 1.6479 | 3.1300 | 0.1941 | \[-0.2712, 0.8829\] |
|  | Reply Path Co-Retweet | 1.2033 | 3.5458 | 0.3030 | \[-0.3379, 0.8111\] |

None of the five hypotheses were statistically supported. Although descriptive trends aligned with theoretical expectations in some cases, these differences did not reach statistical significance. However, the lack of significant findings in traditional hypothesis testing did not preclude the possibility that the retweeter amplification backbones possess distinctive structural features. To further explore this, a series of Conditional Uniform Graph (CUG) tests was conducted.

The CUG tests revealed consistent and noteworthy patterns across all structural metrics. For density, the observed values were significantly lower than those produced by random networks of the same size, with `Pr(x >= Obs)` equal to 1.000 across all network types and stages. For instance, in Stage 2—the most active amplification phase—the density of direct co-retweet networks reached only 0.0676, a value that still fell entirely at the lower end of the simulated random distributions. In later stages, such as Stage 6, densities dropped further to 0.0016, underscoring the extreme sparsity of these networks. This fragmentation suggests that most retweeters remain isolated or weakly connected, a pattern likely resulting from the dispersed temporal activation of actors who participate sporadically across different misinformation events rather than through sustained and coordinated amplification efforts.

The results for transitivity highlighted a clear structural divergence between global and local clustering patterns. For global transitivity, the observed values consistently fell at the lowest end of the simulated random distributions (`Pr(x >= Obs)` = 1.000), suggesting a lack of cohesive global connectivity. In contrast, local transitivity values were significantly higher than those expected by chance, with `Pr(x <= Obs)` consistently at 1.000. During Stage 2, for example, local transitivity peaked at 0.3661 for direct co-retweet networks, indicating the formation of tightly interconnected local clusters even amid overall network sparsity. These findings suggest that small, localized amplification communities emerge among active retweeters, while large-scale, interconnected global structures remain absent.

Similarly, the CUG tests for degree centralization revealed that the observed networks were significantly less centralized than their random counterparts. With `Pr(x >= Obs)` values consistently approaching 1.000, the results indicate that dominant hub nodes rarely emerged. Even in the peak activity period of Stage 2, the degree centralization of direct co-retweet networks was just 0.1325, a level far lower than what would be expected under random configurations. This implies that amplification behaviors are decentralized and diffuse, rather than revolving around a few highly influential actors.

Finally, the CUG tests for average path length revealed that the observed networks exhibited consistently shorter paths than random networks, again with `Pr(x >= Obs)` equal to 1.000 in all cases. Despite their low density and decentralized structure, these networks appear to support relatively efficient information flow. For instance, in Stage 2, the average path length for all network types was approximately 0.88, indicating that despite sparsity, information could traverse the network quickly through short, direct routes. This structural efficiency likely results from the presence of key amplification paths formed by selectively active retweeters who, although not central hubs, play critical roles in bridging otherwise disconnected network segments.

In summary, although the formal hypothesis tests failed to identify statistically significant structural differences across network types and temporal stages, the CUG analyses reveal that the amplification backbones exhibit distinctive, non-random structural configurations. These networks are characterized by extreme sparsity, low global cohesion, strong local clustering, decentralized structures, and surprisingly efficient pathways for information dissemination. Rather than relying on large, interconnected communities or centralized hubs, the spread of misinformation in these networks is facilitated through localized coordination and strategically efficient structural pathways that allow rapid amplification despite an overall fragmented network landscape.

# Discussion

# Reference

Barabási, A.-L. (2016). Network science. Cambridge University Press. https://www.cambridge.org/fr/academic/subjects/physics/statistical-physics/network-science?format=HB&isbn=9781107076266

Bruns, A., Harrington, S., & Hurcombe, E. (2020). Corona? 5G? or both? The dynamics of COVID-19 conspiracy theories on Facebook. *Media International Australia, 177*(1), 12–29. <https://doi.org/10.1177/1329878X20946113>

Chuai, Y., Sergeeva, A., Lenzini, G., & Pröllochs, N. (2024). Community fact-checks trigger moral outrage in replies to misleading posts on social media (arXiv preprint arXiv:2409.08829). https://arxiv.org/abs/2409.08829

Cinelli, M., Quattrociocchi, W., Galeazzi, A., et al. (2020). The COVID-19 social media infodemic. *Scientific Reports, 10*, 16598. <https://doi.org/10.1038/s41598-020-73510-5>

Fazio, L. K., Brashier, N. M., Payne, B. K., & Marsh, E. J. (2015). Knowledge does not protect against illusory truth. Journal of Experimental Psychology: General, 144(5), 993–1002. https://doi.org/10.1037/xge0000098

Ferrara, E. (2020). What types of COVID-19 conspiracies are populated by Twitter bots? *First Monday, 25*(6). <https://doi.org/10.5210/fm.v25i6.10633>

Freeman, L. C. (1979). Centrality in social networks: Conceptual clarification. Social Networks, 1(3), 215–239. https://doi.org/10.1016/0378-8733(78)90021-7

Forouzan, B. A. (2017). Data Communications and Networking (5th ed.). McGraw-Hill Education.

Guarino, S., Trino, N., Celestini, A., Chessa, A., & Riotta, G. (2020). Characterizing networks of propaganda on Twitter: A case study. *Applied Network Science, 5*, 59. <https://doi.org/10.1007/s41109-020-00286-y>

Guess, A., Nagler, J., & Tucker, J. (2019). Less than you think: Prevalence and predictors of fake news dissemination on Facebook. *Science Advances, 5*(1), eaau4586. <https://doi.org/10.1126/sciadv.aau4586>

Klein, B. (2022). The network structure of online amplification (Doctoral dissertation, Northeastern University). Retrieved from https://repository.library.northeastern.edu/files/neu:4f186q93m/fulltext.pdf

Kurose, J. F., & Ross, K. W. (2021). Computer Networking: A Top-Down Approach (8th ed.). Pearson.

Papacharissi, Z. (2015). Affective Publics: Sentiment, Technology, and Politics. Oxford University Press.

Papacharissi, Z., & de Fatima Oliveira, M. (2012). Affective news and networked publics: The rhythms of news storytelling on #egypt. Journal of Communication, 62(2), 266–282. https://doi.org/10.1111/j.1460-2466.2012.01630.x

Perlman, R. (1985). An algorithm for distributed computation of a spanning tree in an extended LAN. ACM SIGCOMM Computer Communication Review, 15(4), 44–53. https://doi.org/10.1145/319056.319004

Shao, C., Ciampaglia, G. L., Varol, O., et al. (2018). The spread of low-credibility content by social bots. *Nature Communications, 9*, 4787. <https://doi.org/10.1038/s41467-018-06930-7>

Stallings, W. (2020). Data and computer communications (11th ed.). Pearson.

Stam, C., Saldanha, E., Halappanavar, M., & Acharya, A. (2024). DISHONEST: Dissecting misinformation spread using homogeneous social networks and semantic topic classification. arXiv preprint arXiv:2412.09578. https://arxiv.org/abs/2412.09578

Tanenbaum, A. S., & Wetherall, D. J. (2011). Computer networks (5th ed.). Pearson.

Vosoughi, S., Roy, D., & Aral, S. (2018). The spread of true and false news online. *Science, 359*(6380), 1146–1151. <https://doi.org/10.1126/science.aap9559>

Wasserman, S., & Faust, K. (1994). *Social Network Analysis: Methods and Applications*. Cambridge University Press.

Weber, D., & Neumann, F. (2021). Amplifying influence through coordinated behaviour in social networks. Social Network Analysis and Mining, 11(1), 1–13. https://doi.org/10.1007/s13278-021-00815-2

Wu, Y., & Shen, H. (2023). Examining retweeting behavior on social networking sites from the perspective of online identity and self-presentation. Frontiers in Psychology, 14, 10202284. https://doi.org/10.3389/fpsyg.2023.10202284

Yan, Y., Toriumi, F., & Sugawara, T. (2021). Understanding how retweets influence the behaviors of social networking service users via agent-based simulation. Computational Social Networks, 8(1), 18. https://doi.org/10.1186/s40649-021-00099-8

Zhao, Z., & Wang, X. (2024). To Reply or to Quote: Comparing conversational framing strategies on Twitter. Proceedings of the ACM on Human-Computer Interaction, 8(CSCW1), Article 3625680. https://doi.org/10.1145/3625680

# Appendix

## Data Collection

This study uses secondary data from the **MuMiN Project** (Multi-platform Misinformation Influence Network), publicly available at: <https://data.bris.ac.uk/datasets/23yv276we2mll25fjakkfim2ml/mumin.zip> The dataset includes information about retweeter ids, tweets ids, misinformation claims, and the date when specific misinformation claims uttered etc.

**Note: About the `date`, [the explanation of dataset's authours](https://arxiv.org/abs/2202.11684):**

*"`date`: The date the claim was uttered. If this date was not available then the date of the review was used. If neither of those two were available then we extracted a potential date from the URL of the fact-checking article using the regular expression \[0-9\]{4}-\[0-9\]{2}-\[0-9\]{2}."*

After downloading all files, create a `data` folder in your working directory and place the files inside it. Then, follow the setup instructions provided [here](https://colab.research.google.com/drive/1JCjgg3moGBOuZk4iVjBpQNqgsAYFyNoS#scrollTo=YS1uxj-59UmA). Use the shell to install required packages via `pip` as directed. Next, open `VS Code`, and run the following Python script to convert `.pkl` files to `.csv`:

```{python}
#| eval: false
#| include: true

import pandas as pd
import os

input_dir = "data/mumin"
output_dir = "data/mumin_csv"
os.makedirs(output_dir, exist_ok=True)

file_names = [
    "claim",
    "user",
    "tweet",
    "reply",
    "article",
    "tweet_discusses_claim",
    "article_discusses_claim",
    "user_follows_user",
    "user_retweeted_tweet",
    "reply_quote_of_tweet",
    "reply_reply_to_tweet"
]

for name in file_names:
    input_path = os.path.join(input_dir, name)
    output_path = os.path.join(output_dir, f"{name}.csv")
    try:
        df = pd.read_pickle(input_path, compression="xz")
        df.to_csv(output_path, index=False)
        print(f"Saved: {output_path}")
    except Exception as e:
        print(f"Failed to convert {name}: {e}")

```

This script will generate the corresponding CSV files for further analysis.

**Note:** *If you have a [X Developer API Pro Account](https://developer.x.com/en/portal/products/pro), you can directly follow the dataset's authors' [MuMiN Tutorial](https://colab.research.google.com/drive/1JCjgg3moGBOuZk4iVjBpQNqgsAYFyNoS#scrollTo=YS1uxj-59UmA) and conduct a deeper analysis with more enriched variables when [rehydrating the original datasets](https://colab.research.google.com/drive/1JCjgg3moGBOuZk4iVjBpQNqgsAYFyNoS#scrollTo=bOQqaJOa_PbF&line=1&uniqifier=1).*

After all steps above done, you can review the data in R:

```{r}
#| eval: false
#| include: true
# Set the data path 
data_path <- "data/mumin_csv/"

# Define the list of files to read
files <- c(
  "claim.csv", "user.csv", "tweet.csv", "reply.csv", "article.csv",
  "tweet_discusses_claim.csv", "article_discusses_claim.csv",
  "user_follows_user.csv", "user_retweeted_tweet.csv",
  "reply_quote_of_tweet.csv", "reply_reply_to_tweet.csv"
)

# Preview the first few rows of each file 
previews <- lapply(files, function(fname) {
  fpath <- file.path(data_path, fname)
  tryCatch(
    read_csv(fpath, n_max = 5),
    error = function(e) tibble::tibble(error = paste("Error:", e$message))
  )
})

names(previews) <- files

```

## Data Preparation

### Loading Required Packages

```{r}
#| eval: false
library(tidyverse)
library(readr)
library(statnet)
library(intergraph)
library(reshape2)
library(btergm)
library(igraph)
```

### Loading and Merging Data

```{r}
#| output: false
# Load data
tweets <- read_csv("data/mumin_csv/tweet.csv")
claims <- read_csv("data/mumin_csv/claim.csv")
tweet_claim <- read_csv("data/mumin_csv/tweet_discusses_claim.csv")
user_retweet <- read_csv("data/mumin_csv/user_retweeted_tweet.csv")

# Join tweet & claim via tweet_claim
tweet_claim_joined <- tweet_claim |> 
  rename(tweet_id = src, claim_id = tgt) |> 
  inner_join(claims, by = c("claim_id" = "id"))

# Join retweeters within users & claim via retweeted tweet
user_claim <- user_retweet |> 
  rename(retweeter_id = src, tweet_id = tgt) |> 
  inner_join(tweet_claim_joined, by = "tweet_id")

# Create a mapping of retweeters and tweets
retweet_map <- user_claim |> 
  select(retweeter_id, tweet_id) |> 
  distinct() 

# Basic data overview
table(user_claim$label)
head(table(user_claim$cluster_keywords))
```

### Filtering for Target Misinformation Narratives

This study focuses specifically on misinformation narratives claiming that **COVID-19 was deliberately created or spread by China or the Wuhan laboratory**. The following filtering steps were applied:

```{r}
#| output: false
# Filter keywords containing "china" or "wuhan"
user_claim_filtered <- user_claim |> 
  filter(str_detect(keywords, "china|wuhan")) 

head(unique(user_claim_filtered$keywords))

# Manually select misinformation topics directly related to the COVID-19 origin narrative
covid_wuhan_misinfo <- user_claim_filtered |>
  filter(keywords %in% c(
    "coronavirus comes biological laboratory wuhan",
    "including corona virus manufactured wuhan",
    "china created spread coronavirus",
    "announced coronavirus artificially created china",
    "china created coronavirus",
    "coronavirus created laboratory china",
    "honjo said china manufactured coronavirus",
    "said new coronavirus manufactured wuhan",
    "coronavirus tested biological weapon china",
    "china testing coronavirus biological weapon",
    "covid 19 lab china",
    "coronavirus natural worked wuhan laboratory",
    "coronavirus manufactured laboratory wuhan specifically",
    "doctor claimed coronavirus china create",
    "corona virus manufactured china",
    "says current coronavirus manufactured wuhan",
    "wuhan coronavirus created patented",
    "covid 19 disease manufactured china",
    "pandemic caused artificial virus china",
    "collaborator assures coronavirus manufactured wuhan",
    "concluded covid leaked wuhan lab",
    "coronavirus created united states china",
    "air comes china import coronavirus",
    "coronavirus released china"
  )) |>
  # Restrict the analysis to English-language posts labeled as "misinformation"
  filter(language == "en") |>
  filter(label == "misinformation")

# Distribution of final misinformation topics
table(covid_wuhan_misinfo$keywords)
table(covid_wuhan_misinfo$cluster_keywords)
```

## Social Network Construction

This network models the co-dissemination behavior of misinformation retweeters. While the exact paths of information transmission are unknown, this co-spreader network captures the structural relationships that may facilitate misinformation diffusion.

### Co-Retweet Network

The `co-retweet` network represents a co-dissemination behavior among retweeters. A tie is created between two users only if they both retweeted the same specific misinformation tweet, which is identified by a shared `tweet_id` in `user_retweeted_tweet.csv` file. Each edge is weighted by the number of such co-retweeting events, reflecting how often the same pair of users jointly retweeted the same pieces of misinformation. Though this relationship does not suggest that a paired users share the same opinion, it captures direct and synchronous amplification of specific misinformation claim in tweets. Therefore, by analyzing the weighted connections among pairs of retweeters, this network checks which retweeters are central to the misinformation amplification/dissemination process, and whether specific communities or cliques form around the repeated propagation of misinformation.

```{r}
#| output: false
# Extract misinformation-related tweets id
misinfo_tweet_id <- unique(covid_wuhan_misinfo$tweet_id)

# Identify pairs of users who co-retweeted the same misinformation tweet
co_retweet_edges <- user_retweet |> 
  filter(tgt %in% misinfo_tweet_id) |> 
  rename(tweet_id = tgt, retweeter_id = src) |> 
  group_by(tweet_id) |> 
  summarise(
    pairs = list(as.data.frame(t(combn(retweeter_id, 2)))), 
    .groups = "drop"
  ) |> 
  unnest(pairs) |> 
  mutate(
    user_1 = pmin(V1, V2), # Ensure lower ID comes first
    user_2 = pmax(V1, V2) # Ensure higher ID comes second
  ) |> 
  select(user_1, user_2) |> 
  group_by(user_1, user_2) |> 
  summarise(weight = n(), .groups = "drop") |> 
  mutate(type = "co-retweet") |>
  filter(user_1 != user_2) |>
  mutate(
    user_1 = as.character(user_1),
    user_2 = as.character(user_2)
  )

# Obtain the full list of unique users involved
all_retweeters <- unique(c(
  covid_wuhan_misinfo$retweeter_id,  
  co_retweet_edges$user_1, 
  co_retweet_edges$user_2
)) |> 
  as.character() |> 
  sort()

# Create initial matrix
adj_matrix_co_retweet <- acast(
  co_retweet_edges, 
  user_1 ~ user_2, 
  value.var = "weight", 
  fill = 0
)

# Ensure matrix completeness by adding missing rows and columns
missing_rows <- setdiff(all_retweeters, rownames(adj_matrix_co_retweet))
missing_cols <- setdiff(all_retweeters, colnames(adj_matrix_co_retweet))

if (length(missing_rows) > 0) {
  adj_matrix_co_retweet <- rbind(
    adj_matrix_co_retweet, 
    matrix(0, nrow = length(missing_rows), ncol = ncol(adj_matrix_co_retweet), 
           dimnames = list(missing_rows, colnames(adj_matrix_co_retweet)))
  )
}

if (length(missing_cols) > 0) {
  adj_matrix_co_retweet <- cbind(
    adj_matrix_co_retweet, 
    matrix(0, nrow = nrow(adj_matrix_co_retweet), ncol = length(missing_cols), 
           dimnames = list(rownames(adj_matrix_co_retweet), missing_cols))
  )
}

# Reorder the matrix to align rows and columns
adj_matrix_co_retweet <- adj_matrix_co_retweet[all_retweeters, all_retweeters]

# Export the adjacency matrix for further analysis
write.csv(adj_matrix_co_retweet, "data/adj_matrix_co_retweet.csv", row.names = TRUE)

# Check dimensions of the final matrix
ncol(adj_matrix_co_retweet)
nrow(adj_matrix_co_retweet)

table(co_retweet_edges$weight)
```

### Co-Retweet (Quote Pathway)

The **Co-Retweet (Quote Pathway)** Network captures relational ties between users who both engaged in the dissemination (i.e., retweeting) of misinformation content either by a) retweeting original misinformation tweets, or b) retweeting tweets that explicitly quoting misinformation tweets. In this network, a tie is formed between two users if they each retweeted at least one tweet that is either a misinformation tweet or a tweet quoting misinformation pieces.

```{r}
# Load quote relationships between tweets (quoting tweet & quoted tweet)
quote_relations <- read_csv("data/mumin_csv/reply_quote_of_tweet.csv") |>
  filter(tgt %in% misinfo_tweet_id | src %in% misinfo_tweet_id) |> 
  rename(
    quoted_tweet_id = tgt, # The misinformation tweet being quoted
    quoting_tweet_id = src # The tweet that quotes the misinformation tweet
  )

# Create the complete set of tweets relevant to the quote pathway
quote_path_tweet_ids <- unique(c(
  quote_relations$quoted_tweet_id , # Original misinformation tweets
  quote_relations$quoting_tweet_id # Tweets that quoted misinformation
))

# Find all users who retweeted these tweets
quote_path_retweets <- covid_wuhan_misinfo |> 
  filter(tweet_id %in% quote_path_tweet_ids) 

# Generate co-retweet edges based on shared retweeting of these tweets
co_retweet_quote_path_edges <- quote_path_retweets |>
  group_by(tweet_id) |>
  summarise(
    pairs = list(as.data.frame(t(combn(retweeter_id, 2)))), 
    .groups = "drop"
  ) |>
  unnest(pairs) |>
  mutate(
    user_1 = pmin(V1, V2),
    user_2 = pmax(V1, V2)
  ) |>
  select(user_1, user_2) |>
  group_by(user_1, user_2) |>
  summarise(weight = n(), .groups = "drop") |>
  mutate(type = "co-retweet-quote-path") |>
  filter(user_1 != user_2) |> 
  mutate(
    user_1 = as.character(user_1),
    user_2 = as.character(user_2)
  )

# Prepare full user list
all_retweeters_quote <- unique(c(
  covid_wuhan_misinfo$retweeter_id, 
  co_retweet_quote_path_edges$user_1, 
  co_retweet_quote_path_edges$user_2
)) |> 
  as.character() |> 
  sort()

# Create the adjacency matrix
adj_matrix_co_retweet_quote_path <- acast(
  co_retweet_quote_path_edges, 
  user_1 ~ user_2, 
  value.var = "weight", 
  fill = 0
)

# Add missing rows and columns to complete the matrix
missing_rows <- setdiff(all_retweeters_quote, rownames(adj_matrix_co_retweet_quote_path))
missing_cols <- setdiff(all_retweeters_quote, colnames(adj_matrix_co_retweet_quote_path))

if (length(missing_rows) > 0) {
  adj_matrix_co_retweet_quote_path <- rbind(
    adj_matrix_co_retweet_quote_path, 
    matrix(0, nrow = length(missing_rows), ncol = ncol(adj_matrix_co_retweet_quote_path), 
           dimnames = list(missing_rows, colnames(adj_matrix_co_retweet_quote_path)))
  )
}

if (length(missing_cols) > 0) {
  adj_matrix_co_retweet_quote_path <- cbind(
    adj_matrix_co_retweet_quote_path, 
    matrix(0, nrow = nrow(adj_matrix_co_retweet_quote_path), ncol = length(missing_cols), 
           dimnames = list(rownames(adj_matrix_co_retweet_quote_path), missing_cols))
  )
}

# Ensure matrix symmetry and proper ordering
adj_matrix_co_retweet_quote_path <- adj_matrix_co_retweet_quote_path[all_retweeters_quote, all_retweeters_quote]

# Save the matrix for further analysis
write.csv(adj_matrix_co_retweet_quote_path, "data/adj_matrix_co_retweet_quote_path.csv", row.names = TRUE)

# Output matrix dimensions for verification
nrow(adj_matrix_co_retweet_quote_path)
ncol(adj_matrix_co_retweet_quote_path)

table(co_retweet_quote_path_edges$weight)

```

```{r}
quote_data <-read_csv("data/mumin_csv/reply_quote_of_tweet.csv")

sum(quote_data$src %in% misinfo_tweet_id)

sum(quote_data$tgt %in% misinfo_tweet_id)

sum(misinfo_tweet_id %in% quote_data$tgt)

sum(misinfo_tweet_id %in% c(quote_data$src,quote_data$tgt))

```

### Co-Retweet (Reply Pathway)

The **Co-Retweet (Reply Pathway)** Network captures relational ties between users who both retweeted tweets directly involved in misinformation discussions, either by a) retweeting misinformation tweets themselves, or b) retweeting the tweets that explicitly replied to such misinformation content.

```{r}
# Load reply relationships to identify reply chains around misinformation
reply_relations <- read_csv("data/mumin_csv/reply_reply_to_tweet.csv") |>
  filter(tgt %in% misinfo_tweet_id | src %in% misinfo_tweet_id) |> 
  rename(
    replied_tweet_id = tgt, # The misinformation tweet being replied to
    replying_tweet_id = src # The tweet that replies to the misinformation tweet
  )

# Step 1: Create complete set of tweets involved in reply chains related to misinformation
reply_path_tweet_ids <- unique(c(
  reply_relations$replied_tweet_id, 
  reply_relations$replying_tweet_id
))

# Step 2: Find all users who retweeted these tweets (participating in the reply pathway)
reply_path_retweets <- covid_wuhan_misinfo |> 
  filter(tweet_id %in% reply_path_tweet_ids)

# Step 3: Generate Co-Reply Edges based on shared retweeting of reply-path tweets
co_retweet_reply_path_edges <- reply_path_retweets |>
  group_by(tweet_id) |>
  summarise(
    pairs = list(as.data.frame(t(combn(retweeter_id, 2)))), 
    .groups = "drop"
  ) |>
  unnest(pairs) |>
  mutate(
    user_1 = pmin(V1, V2), 
    user_2 = pmax(V1, V2)
  ) |>
  select(user_1, user_2) |>
  group_by(user_1, user_2) |>
  summarise(weight = n(), .groups = "drop") |>
  mutate(type = "co-retweet-reply-path") |>
  filter(user_1 != user_2) |>
  mutate(
    user_1 = as.character(user_1),
    user_2 = as.character(user_2)
  )

# Prepare full user list
all_retweeters_reply <- unique(c(
  covid_wuhan_misinfo$retweeter_id, 
  co_retweet_reply_path_edges$user_1, 
  co_retweet_reply_path_edges$user_2
)) |> 
  as.character() |> 
  sort()

# Create the adjacency matrix
adj_matrix_co_retweet_reply_path <- acast(
  co_retweet_reply_path_edges, 
  user_1 ~ user_2, 
  value.var = "weight", 
  fill = 0
)

# Add missing rows and columns to complete the matrix
missing_rows <- setdiff(all_retweeters_reply, rownames(adj_matrix_co_retweet_reply_path))
missing_cols <- setdiff(all_retweeters_reply, colnames(adj_matrix_co_retweet_reply_path))

if (length(missing_rows) > 0) {
  adj_matrix_co_retweet_reply_path <- rbind(
    adj_matrix_co_retweet_reply_path, 
    matrix(0, nrow = length(missing_rows), ncol = ncol(adj_matrix_co_retweet_reply_path), 
           dimnames = list(missing_rows, colnames(adj_matrix_co_retweet_reply_path)))
  )
}

if (length(missing_cols) > 0) {
  adj_matrix_co_retweet_reply_path <- cbind(
    adj_matrix_co_retweet_reply_path, 
    matrix(0, nrow = nrow(adj_matrix_co_retweet_reply_path), ncol = length(missing_cols), 
           dimnames = list(rownames(adj_matrix_co_retweet_reply_path), missing_cols))
  )
}

# Ensure matrix symmetry and proper ordering
adj_matrix_co_retweet_reply_path <- adj_matrix_co_retweet_reply_path[all_retweeters_reply, all_retweeters_reply]

# Save the matrix for further analysis
write.csv(adj_matrix_co_retweet_reply_path, "data/adj_matrix_co_retweet_reply_path.csv", row.names = TRUE)

# Output matrix dimensions for verification
nrow(adj_matrix_co_retweet_reply_path)
ncol(adj_matrix_co_retweet_reply_path)

table(co_retweet_reply_path_edges$weight)
```

### Extra EDA

#### Followship

A directed edge from User A to User B indicates that User A follows User B. This network captures the potential flow of influence among misinformation retweeters and allows for the identification of opinion leaders and hierarchical structures in misinformation diffusion.

```{r}
# Load retweeter list
retweeter_id_misinfo <- unique(covid_wuhan_misinfo$retweeter_id) |>
  as.character()

# Load and filter directed follow edges
retweeter_follow_edges_directed <- read_csv("data/mumin_csv/user_follows_user.csv") |> 
  rename(follower = src, followee = tgt) |> 
  filter(follower %in% retweeter_id_misinfo & followee %in% retweeter_id_misinfo) |> 
  mutate(weight = 1, type = "follow_directed") |> 
  select(follower, followee, weight, type)

# Check if any edges exist
if (nrow(retweeter_follow_edges_directed) == 0) {
  message("No directed follow relationships found among misinformation retweeters.")
} else {
  # Create adjacency matrix
  all_retweeters <- sort(unique(c(
    covid_wuhan_misinfo$retweeter_id, 
    retweeter_follow_edges_directed$follower, 
    retweeter_follow_edges_directed$followee
  ))) |> as.character()

  adj_matrix_follow_directed <- matrix(
    0, 
    nrow = length(all_retweeters), 
    ncol = length(all_retweeters),
    dimnames = list(all_retweeters, all_retweeters)
  )

  # Fill matrix with edges
  apply(retweeter_follow_edges_directed, 1, function(row) {
    adj_matrix_follow_directed[row["follower"], row["followee"]] <<- 1
  })

  # Save matrix
  write.csv(adj_matrix_follow_directed, "data/adj_matrix_follow_directed.csv", row.names = TRUE)
}
```

Analysis of the follower network among misinformation retweeters revealed no recorded follower-followee relationships within this group. This indicates that users involved in the dissemination of COVID-19 origin misinformation acted largely as isolated agents rather than as members of a tightly connected social network. Such a pattern suggests that the spread of misinformation in this case was driven primarily by content virality and opportunistic engagement, rather than through established social ties or influencer-led dissemination.

#### Follower Counts

```{r}
# Grab Follower Counts for each nodes
follow_data <- read_csv("data/mumin_csv/user_follows_user.csv") |>
  mutate(tgt = as.character(tgt))

follower_counts <- follow_data |> 
  filter(tgt %in% retweeter_id_misinfo) |> 
  count(tgt, name = "follower_count") |> 
  rename(retweeter_id = tgt) 
  
sum(retweeter_id_misinfo %in% follow_data$tgt)

follower_counts_full <- tibble(retweeter_id = retweeter_id_misinfo) |> 
  left_join(follower_counts, by = "retweeter_id") |> 
  replace_na(list(follower_count = 0)) |>
  arrange(desc(follower_count))

```

The follower count data is used here not to identify influencers, but to characterize the composition of the amplifier backbone. In our context, we are not asking “Who can spread misinformation most effectively to a large audience?”

Instead, we can check: **Do the structural patterns of amplifier co-behavior suggest reliance on high-profile nodes, or do they reveal decentralized, echo-chamber-like clusters of low-profile actors?**

According to our output, among the 112 retweeters involved in misinformation amplification reveals a highly polarized distribution. Specifically, only 8 retweeters have a modest following of 1–2 followers, while a single retweeter holds a disproportionately large follower base of 229. The remaining 103 retweeters have zero followers.

The overwhelmingly low follower counts among retweeters suggest that most amplification behavior arises from low-profile users acting collectively, rather than from a centralized set of influential nodes. This aligns with the structural investigation of how amplification backbones emerge from the behaviors of ordinary users, independent of their social reach.

现在我们把刚才提到的东西形成narrative： Follower counts 极低意味着，尽管这些 retweeters共同参与了谣言放大，但他们本身没有强大的“外部传播能力”。

因此，这些共同行为的边更多地反映的是意识形态共鸣、情感驱动或事件反应同步性，而不是实际的信息放大效能。

这个特征强化了你们网络作为一种“放大结构现象”的解释，而不是实质性影响力传播网络。

This feature does not invalidate your network analysis; it sharpens its theoretical positioning.

| 网络类型 | Follower Counts 特征的影响 |
|-------------------------|------------------------------------------------|
| **Direct Co-Retweet** | 说明这种看似密集的网络，更多体现为对热点内容的**同步响应**，而非真实的高效放大，边代表的更多是“同一时刻被动跟风”。 |
| **Quote Pathway Co-Retweet** | 强化了这类网络的**解释性社群**特征，尽管 retweeters 没有大规模的受众，但他们通过重新解读和附加立场制造局部影响。 |
| **Reply Pathway Co-Retweet** | 进一步印证了这类网络的**情绪驱动**和**局部封闭讨论**特征，这些 retweeters 可能就是在小范围争吵、表达态度，而非具备扩散能力的放大者。 |

你的分析不是关于“谣言能被放大多远”，而是关于“谁在参与放大这种行为，以及他们如何彼此构成放大结构的骨干”。

这直接支持你提出的Amplification Backbone概念，强调的是一种社会结构现象，而非流量影响力的传递。 This feature does not invalidate your network analysis; it sharpens its theoretical positioning.

Amplifier ≠ Influencer

Literature 中“Amplifiers”的角色常常和 Influencers 混淆，但你的研究强调的是结构性放大者，他们通过共同行为增强特定叙事的可见性和存在感，而不是直接拥有巨大的传播半径。

你现在的发现正好作为一个理论修正点：“Unlike traditional studies that focus on individual influence and follower reach, this study reconceptualizes amplifiers as structural agents whose behavioral convergence sustains misinformation visibility, regardless of their personal audience size.”

这强化了 Amplification Backbone 的概念

你的网络强调的是放大者之间的结构性共鸣和联合行为模式。这种放大不一定导致广泛的外部扩散，但却维持了谣言的持续性存在和集体认知效应。

在 Literature Review 中可以明确指出：这种放大骨干的存在，正是为什么即便没有大规模的扩散，一些谣言仍然在特定群体中“长尾式存活”并反复被激活的原因。

## Graph

### Co-retweet Net

#### Stage 1 Plot (Co-retweet Net)

```{r}
#| output: false
# Load Data and Build Full Network
adj_matrix <- read.csv("data/adj_matrix_co_retweet.csv", row.names = 1, check.names = FALSE)

net_full <- network(as.matrix(adj_matrix), directed = FALSE, matrix.type = "adjacency")

retweeter_stage <- covid_wuhan_misinfo |>
  mutate(retweeter_id = as.character(retweeter_id)) |>
  select(retweeter_id, date, keywords) |>
  distinct() |>
  arrange(date) |>
  mutate(
    group = as.numeric(factor(paste(date, keywords), levels = unique(paste(date, keywords))))
  ) |>
  select(retweeter_id, group, date, keywords)

node_names <- net_full %v% "vertex.names"

assigned_groups <- retweeter_stage$group[match(node_names, retweeter_stage$retweeter_id)]

set.vertex.attribute(net_full, "group", assigned_groups)

# Assign Current Stage Info
target_group <- 1  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)

stage_keywords <- unique(stage_info$keywords)

# Get Edge List and Filter Edges for Current Stage
edgelist <- as.edgelist(net_full)
v1 <- edgelist[, 1]
v2 <- edgelist[, 2]

group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage Adjacency Matrix
adj_stage1 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage1) <- colnames(adj_stage1) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage1[v1[idx], v2[idx]] <- 1
    adj_stage1[v2[idx], v1[idx]] <- 1
  }
}

# Save Stage 1 Adjacency Matrix
write.csv(adj_stage1, "data/adj_matrix_stage1.csv", row.names = TRUE)

# Build Network Object for Stage 1
net_stage1 <- network(adj_stage1, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- paste0("Co-Retweet Network: Stage ", target_group)

plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage1, 
  gmode = "graph", 
  mode = "kamadakawai"
)
```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# Save PNG
# png("plot/co_retweet_net/Co-Retweet-Stage1.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage1,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

# Add Legend
legend(
  "right",
  legend = c("Stage 1 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)
```

#### Stage 2 Plot (Co-retweet Net)

```{r}
#| output: false
# Assign Current Stage Info
target_group <- 2  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Get Edge List and Filter Edges for Current Stage
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 2 Adjacency Matrix
adj_stage2 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage2) <- colnames(adj_stage2) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage2[v1[idx], v2[idx]] <- 1
    adj_stage2[v2[idx], v1[idx]] <- 1
  }
}

# Save Stage 2 Adjacency Matrix
write.csv(adj_stage2, "data/adj_matrix_stage2.csv", row.names = TRUE)

# Build Network Object for Stage 2
net_stage2 <- network(adj_stage2, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- paste0("Co-Retweet Network: Stage ", target_group)
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage2, 
  gmode = "graph", 
  mode = "kamadakawai"
)
```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# Save PNG for Stage 2
# png("plot/co_retweet_net/Co-Retweet-Stage2.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage2,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

# Add Legend
legend(
  "right",
  legend = c("Stage 2 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

#### Stage 3 Plot (Co-retweet Net)

```{r}
#| output: false
# Assign Current Stage Info
target_group <- 3  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Get Edge List and Filter Edges for Current Stage
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 3 Adjacency Matrix
adj_stage3 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage3) <- colnames(adj_stage3) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage3[v1[idx], v2[idx]] <- 1
    adj_stage3[v2[idx], v1[idx]] <- 1
  }
}

# Save Stage 3 Adjacency Matrix
write.csv(adj_stage3, "data/adj_matrix_stage3.csv", row.names = TRUE)

# Build Network Object for Stage 3
net_stage3 <- network(adj_stage3, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- paste0("Co-Retweet Network: Stage ", target_group)
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage3, 
  gmode = "graph", 
  mode = "kamadakawai"
)
```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# Save PNG for Stage 3
# png("plot/co_retweet_net/Co-Retweet-Stage3.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage3,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

# Add Legend
legend(
  "right",
  legend = c("Stage 3 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)
```

#### Stage 4 Plot (Co-retweet Net)

```{r}
#| output: false
# Assign Current Stage Info
target_group <- 4  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Get Edge List and Filter Edges for Current Stage
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 4 Adjacency Matrix
adj_stage4 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage4) <- colnames(adj_stage4) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage4[v1[idx], v2[idx]] <- 1
    adj_stage4[v2[idx], v1[idx]] <- 1
  }
}

# Save Stage 4 Adjacency Matrix
write.csv(adj_stage4, "data/adj_matrix_stage4.csv", row.names = TRUE)

# Build Network Object for Stage 4
net_stage4 <- network(adj_stage4, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- paste0("Co-Retweet Network: Stage ", target_group)
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage4, 
  gmode = "graph", 
  mode = "kamadakawai"
)
```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# Save PNG for Stage 4
# png("plot/co_retweet_net/Co-Retweet-Stage4.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage4,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

# Add Legend
legend(
  "right",
  legend = c("Stage 4 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

#### Stage 5 Plot (Co-retweet Net)

```{r}
#| output: false
# Assign Current Stage Info
target_group <- 5  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Get Edge List and Filter Edges for Current Stage
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 5 Adjacency Matrix
adj_stage5 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage5) <- colnames(adj_stage5) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage5[v1[idx], v2[idx]] <- 1
    adj_stage5[v2[idx], v1[idx]] <- 1
  }
}

# Save Stage 5 Adjacency Matrix
write.csv(adj_stage5, "data/adj_matrix_stage5.csv", row.names = TRUE)

# Build Network Object for Stage 5
net_stage5 <- network(adj_stage5, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- paste0("Co-Retweet Network: Stage ", target_group)
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage5, 
  gmode = "graph", 
  mode = "kamadakawai"
)

```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# Save PNG for Stage 5
# png("plot/co_retweet_net/Co-Retweet-Stage5.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage5,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

# Add Legend
legend(
  "right",
  legend = c("Stage 5 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

#### Stage 6 Plot (Co-retweet Net)

```{r}
#| output: false
# Assign Current Stage Info
target_group <- 6  

stage_info <- retweeter_stage |> 
  filter(group == target_group) |> 
  distinct(date, keywords)

stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

adj_stage6 <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage6) <- colnames(adj_stage6) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage6[v1[idx], v2[idx]] <- 1
    adj_stage6[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage6, "data/adj_matrix_stage6.csv", row.names = TRUE)

net_stage6 <- network(adj_stage6, directed = FALSE, matrix.type = "adjacency")

plot_title <- paste0("Co-Retweet Network: Stage ", target_group)
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(
  net_stage6, 
  gmode = "graph", 
  mode = "kamadakawai"
)
```

```{r}
vertex_colors <- ifelse(
  assigned_groups == target_group, 
  "steelblue", 
  "gray"
)

# png("plot/co_retweet_net/Co-Retweet-Stage6.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage6,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

mtext(
  text = plot_subtitle,
  side = 1, 
  line = 3, 
  cex = 0.8, 
  family = "serif"
)

# Add Data Source as Footer Note
mtext(
  text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
  side = 1, 
  line = 4.2,
  cex = 0.6, 
  family = "serif"
)

legend(
  "right",
  legend = c("Stage 6 Retweeters", "Other Retweeters"), 
  col = c("steelblue", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

### Quote path Co-retweet Net

#### Stage 1 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Load Adjacency Matrix for Quote Path Co-Retweet
adj_matrix_quote <- read.csv("data/adj_matrix_co_retweet_quote_path.csv", row.names = 1, check.names = FALSE)
net_full_quote <- network(as.matrix(adj_matrix_quote), directed = FALSE, matrix.type = "adjacency")

# Retweeter Stage Information (Assuming covid_wuhan_misinfo is already loaded)
node_names <- net_full_quote %v% "vertex.names"
assigned_groups <- retweeter_stage$group[match(node_names, retweeter_stage$retweeter_id)]
set.vertex.attribute(net_full_quote, "group", assigned_groups)

# Stage 1 Info
target_group <- 1
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Current Stage
edgelist <- as.edgelist(net_full_quote)
v1 <- edgelist[, 1]
v2 <- edgelist[, 2]
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 1 Adjacency Matrix
adj_stage1_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage1_quote) <- colnames(adj_stage1_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage1_quote[v1[idx], v2[idx]] <- 1
    adj_stage1_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage1_quote, "data/adj_matrix_stage1_quote.csv", row.names = TRUE)

# Build Network Object
net_stage1_quote <- network(adj_stage1_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 1"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

edge_alpha <- 0.1 
edge_width <- 0.2  

set.seed(42)
layout_coords <- gplot(net_stage1_quote, 
                       gmode = "graph", 
                       mode = "kamadakawai")
```

```{r}

vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Plot and Save Image
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage1.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage1_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = edge_width,
  edge.col = adjustcolor("black", alpha.f = edge_alpha),
  main = plot_title
)

# Add Subtitle
mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")

# Add Data Source Footer
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

# Add Legend
legend(
  "right",
  legend = c("Stage 1 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

#### Stage 2 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Stage 2 Parameters
target_group <- 2
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 2
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 2 Adjacency Matrix
adj_stage2_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage2_quote) <- colnames(adj_stage2_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage2_quote[v1[idx], v2[idx]] <- 1
    adj_stage2_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage2_quote, "data/adj_matrix_stage2_quote.csv", row.names = TRUE)

# Build Network Object
net_stage2_quote <- network(adj_stage2_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 2"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage2_quote, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Save PNG
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage2.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage2_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

# Add Subtitle
mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")

# Add Data Source Footer
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

# Add Legend
legend(
  "right",
  legend = c("Stage 2 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

```

#### Stage 3 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Stage 3 Parameters
target_group <- 3
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 3
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 3 Adjacency Matrix
adj_stage3_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage3_quote) <- colnames(adj_stage3_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage3_quote[v1[idx], v2[idx]] <- 1
    adj_stage3_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage3_quote, "data/adj_matrix_stage3_quote.csv", row.names = TRUE)

# Build Network Object
net_stage3_quote <- network(adj_stage3_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 3"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage3_quote, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Save PNG
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage3.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage3_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

# Add Subtitle
mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")

# Add Data Source Footer
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

# Add Legend
legend(
  "right",
  legend = c("Stage 3 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)


```

#### Stage 4 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Stage 4 Parameters
target_group <- 4
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 4
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 4 Adjacency Matrix
adj_stage4_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage4_quote) <- colnames(adj_stage4_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage4_quote[v1[idx], v2[idx]] <- 1
    adj_stage4_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage4_quote, "data/adj_matrix_stage4_quote.csv", row.names = TRUE)

# Build Network Object
net_stage4_quote <- network(adj_stage4_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 4"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage4_quote, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Save PNG
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage4.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage4_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

# Add Subtitle
mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")

# Add Data Source Footer
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

# Add Legend
legend(
  "right",
  legend = c("Stage 4 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5                      
)

dev.off()

```

#### Stage 5 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Stage 5 Parameters
target_group <- 5
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 5
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 5 Adjacency Matrix
adj_stage5_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage5_quote) <- colnames(adj_stage5_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage5_quote[v1[idx], v2[idx]] <- 1
    adj_stage5_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage5_quote, "data/adj_matrix_stage5_quote.csv", row.names = TRUE)

# Build Network Object
net_stage5_quote <- network(adj_stage5_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 5"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage5_quote, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Save PNG
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage5.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage5_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 5 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6, 
  text.col = "black", 
  bty = "n", 
  y.intersp = 1.5
)

```

#### Stage 6 Plot (Quote path Co-retweet Net)

```{r}
#| output: false
# Stage 6 Parameters
target_group <- 6
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 6
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 6 Adjacency Matrix
adj_stage6_quote <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage6_quote) <- colnames(adj_stage6_quote) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage6_quote[v1[idx], v2[idx]] <- 1
    adj_stage6_quote[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage6_quote, "data/adj_matrix_stage6_quote.csv", row.names = TRUE)

# Build Network Object
net_stage6_quote <- network(adj_stage6_quote, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Quote Path Co-Retweet Network: Stage 6"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage6_quote, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "darkorange", "gray")

# Save PNG
# png("plot/quote_path_net/Quote-Path-Co-Retweet-Stage6.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage6_quote,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 6 Retweeters", "Other Retweeters"), 
  col = c("darkorange", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6, 
  text.col = "black", 
  bty = "n", 
  y.intersp = 1.5
)

```

### Reply path Co-retweet Net

#### Stage 1 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
# Load Data
adj_matrix_reply <- read.csv("data/adj_matrix_co_retweet_reply_path.csv", row.names = 1, check.names = FALSE)
net_full_reply <- network(as.matrix(adj_matrix_reply), directed = FALSE, matrix.type = "adjacency")

node_names <- net_full_reply %v% "vertex.names"
assigned_groups <- retweeter_stage$group[match(node_names, retweeter_stage$retweeter_id)]
set.vertex.attribute(net_full_reply, "group", assigned_groups)

# Stage 1 Settings
target_group <- 1
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Edges Filtering
edgelist_reply <- as.edgelist(net_full_reply)
v1 <- edgelist_reply[, 1]
v2 <- edgelist_reply[, 2]
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Adjacency Matrix for Stage 1
adj_stage1_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage1_reply) <- colnames(adj_stage1_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage1_reply[v1[idx], v2[idx]] <- 1
    adj_stage1_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage1_reply, "data/adj_matrix_stage1_reply.csv", row.names = TRUE)
net_stage1_reply <- network(adj_stage1_reply, directed = FALSE, matrix.type = "adjacency")

# Visualization
plot_title <- "Reply Path Co-Retweet Network: Stage 1"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)
set.seed(42)
layout_coords <- gplot(net_stage1_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# Save PNG
# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage1.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage1_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 1 Retweeters", "Other Retweeters"), 
  col = c("forestgreen", "gray"), 
  pch = 19, pt.cex = 1, cex = 0.6, 
  text.col = "black", bty = "n", y.intersp = 1.5
)

```

#### Stage 2 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
# Stage 2 Parameters
target_group <- 2
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 2
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 2 Adjacency Matrix
adj_stage2_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage2_reply) <- colnames(adj_stage2_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage2_reply[v1[idx], v2[idx]] <- 1
    adj_stage2_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage2_reply, "data/adj_matrix_stage2_reply.csv", row.names = TRUE)

# Build Network Object
net_stage2_reply <- network(adj_stage2_reply, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Reply Path Co-Retweet Network: Stage 2"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage2_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# Save PNG
# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage2.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage2_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 2 Retweeters", "Other Retweeters"), 
  col = c("forestgreen", "gray"), 
  pch = 19, pt.cex = 1, cex = 0.6, 
  text.col = "black", bty = "n", y.intersp = 1.5
)

```

#### Stage 3 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
# Stage 3 Parameters
target_group <- 3
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

# Filter Edges for Stage 3
group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

# Build Stage 3 Adjacency Matrix
adj_stage3_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage3_reply) <- colnames(adj_stage3_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage3_reply[v1[idx], v2[idx]] <- 1
    adj_stage3_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage3_reply, "data/adj_matrix_stage3_reply.csv", row.names = TRUE)

# Build Network Object
net_stage3_reply <- network(adj_stage3_reply, directed = FALSE, matrix.type = "adjacency")

# Visualization Settings
plot_title <- "Reply Path Co-Retweet Network: Stage 3"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, 
                        " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage3_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# Save PNG
# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage3.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage3_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 3 Retweeters", "Other Retweeters"), 
  col = c("forestgreen", "gray"), 
  pch = 19, 
  pt.cex = 1,  
  cex = 0.6,                    
  text.col = "black", 
  bty = "n",                    
  y.intersp = 1.5
)
```

#### Stage 4 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
target_group <- 4
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

adj_stage4_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage4_reply) <- colnames(adj_stage4_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage4_reply[v1[idx], v2[idx]] <- 1
    adj_stage4_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage4_reply, "data/adj_matrix_stage4_reply.csv", row.names = TRUE)
net_stage4_reply <- network(adj_stage4_reply, directed = FALSE, matrix.type = "adjacency")

plot_title <- "Reply Path Co-Retweet Network: Stage 4"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage4_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage4.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage4_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)", 
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 4 Retweeters", "Other Retweeters"), 
  col = c("forestgreen", "gray"), 
  pch = 19, pt.cex = 1, cex = 0.6, 
  text.col = "black", bty = "n", y.intersp = 1.5
)


```

#### Stage 5 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
target_group <- 5
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

adj_stage5_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage5_reply) <- colnames(adj_stage5_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage5_reply[v1[idx], v2[idx]] <- 1
    adj_stage5_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage5_reply, "data/adj_matrix_stage5_reply.csv", row.names = TRUE)
net_stage5_reply <- network(adj_stage5_reply, directed = FALSE, matrix.type = "adjacency")

plot_title <- "Reply Path Co-Retweet Network: Stage 5"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage5_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage5.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage5_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)",
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 5 Retweeters", "Other Retweeters"),
  col = c("forestgreen", "gray"),
  pch = 19, pt.cex = 1, cex = 0.6,
  text.col = "black", bty = "n", y.intersp = 1.5
)

```

#### Stage 6 Plot (Reply path Co-retweet Net)

```{r}
#| output: false
target_group <- 6
stage_info <- retweeter_stage |> filter(group == target_group) |> distinct(date, keywords)
stage_date <- unique(stage_info$date)
stage_keywords <- unique(stage_info$keywords)

group_v1 <- assigned_groups[v1]
group_v2 <- assigned_groups[v2]
keep_edges <- which(group_v1 == target_group & group_v2 == target_group)

adj_stage6_reply <- matrix(0, nrow = length(node_names), ncol = length(node_names))
rownames(adj_stage6_reply) <- colnames(adj_stage6_reply) <- node_names

if (length(keep_edges) > 0) {
  for (idx in keep_edges) {
    adj_stage6_reply[v1[idx], v2[idx]] <- 1
    adj_stage6_reply[v2[idx], v1[idx]] <- 1
  }
}

write.csv(adj_stage6_reply, "data/adj_matrix_stage6_reply.csv", row.names = TRUE)
net_stage6_reply <- network(adj_stage6_reply, directed = FALSE, matrix.type = "adjacency")

plot_title <- "Reply Path Co-Retweet Network: Stage 6"
plot_subtitle <- paste0("Misinformation Claim: ", stage_keywords, " | Claim Uttered on: ", stage_date)

set.seed(42)
layout_coords <- gplot(net_stage6_reply, gmode = "graph", mode = "kamadakawai")
```

```{r}
vertex_colors <- ifelse(assigned_groups == target_group, "forestgreen", "gray")

# png("plot/reply_path_net/Reply-Path-Co-Retweet-Stage6.png", width = 2200, height = 2100, res = 300)
par(family = "serif", mar = c(6, 0, 3, 1))

plot.network(
  net_stage6_reply,
  displaylabels = FALSE,
  vertex.cex = 1,
  vertex.col = vertex_colors,
  coord = layout_coords,
  edge.lwd = 0.2,
  edge.col = adjustcolor("black", alpha.f = 0.1),
  main = plot_title
)

mtext(text = plot_subtitle, side = 1, line = 3, cex = 0.8, family = "serif")
mtext(text = "Data Source: MuMiN Dataset (https://data.bristol.ac.uk/data/en_GB/dataset/23yv276we2mll25fjakkfim2ml)",
      side = 1, line = 4.2, cex = 0.6, family = "serif")

legend(
  "right",
  legend = c("Stage 6 Retweeters", "Other Retweeters"),
  col = c("forestgreen", "gray"),
  pch = 19, pt.cex = 1, cex = 0.6,
  text.col = "black", bty = "n", y.intersp = 1.5
)
```

## Data Analysis

### Code

Write a function to collect metrics of the networks

```{r}
calculate_metrics_statnet <- function(csv_path, network_type, stage) {
  adj_matrix <- as.matrix(read.csv(csv_path, row.names = 1))
  net <- network(adj_matrix, directed = FALSE, matrix.type = "adjacency")
  
  if (network.size(net) <= 1) {
    return(data.frame(
      Network_Type = network_type,
      Stage = stage,
      Size = NA,
      Edges = NA,
      Density = NA,
      Avg_Degree = NA,
      Components = NA,
      Isolates = NA,
      Global_Transitivity = NA,
      Local_Transitivity = NA,
      Diameter = NA,
      Average_Path_Length = NA,
      Degree_Centralization = NA,
      Betweenness_Centralization = NA,
      Closeness_Centralization = NA,
      Cliques_Total = NA,
      Cliques_Max_Size = NA,
      Cliques_Min_Size = NA
    ))
  }
  
  size <- network.size(net)
  edges <- network.edgecount(net)
  
  # Density and Average Degree
  density_val <- gden(net)
  avg_degree_val <- mean(degree(net))
  
  # Components: Exclude isolates
  components_info <- component.dist(net)
  num_components <- sum(components_info$csize > 1)
  
  isolates_count <- sum(degree(net) == 0)
  
  # Diameter
  dist_matrix <- geodist(net)$gdist
  dist_matrix[is.infinite(dist_matrix)] <- NA
  diameter_val <- max(dist_matrix, na.rm = TRUE)
  
  # Calculate Average Path Length
  avg_path_length <- mean(dist_matrix, na.rm = TRUE)
  
  # Global and Local Transitivity
  global_transitivity <- gtrans(net)  
  
  # Local Transitivity (Manual Calculation)
  calculate_local_transitivity <- function(adj_matrix) {
    n <- nrow(adj_matrix)
    clustering_coeffs <- numeric(n)
    
    for (i in 1:n) {
      neighbors <- which(adj_matrix[i, ] == 1)
      k_i <- length(neighbors)
      if (k_i < 2) {
        clustering_coeffs[i] <- 0
      } else {
        subgraph <- adj_matrix[neighbors, neighbors]
        actual_links <- sum(subgraph) / 2  # Undirected graph
        possible_links <- k_i * (k_i - 1) / 2
        clustering_coeffs[i] <- actual_links / possible_links
      }
    }
    mean(clustering_coeffs, na.rm = TRUE)
  }
  
  local_transitivity <- calculate_local_transitivity(adj_matrix)
  
  # Degree Centralization
  deg_vals <- degree(net)
  centralization_deg <- if (length(deg_vals) > 0) {
    (max(deg_vals) * (size - 1) - sum(max(deg_vals) - deg_vals)) / ((size - 1)^2)
  } else {
    NA
  }
  
  # Betweenness Centralization
  btw_vals <- betweenness(net)
  centralization_btw <- if (length(btw_vals) > 0) {
    (max(btw_vals) * (size - 1) - sum(max(btw_vals) - btw_vals)) / ((size - 1)^2)
  } else {
    NA
  }
  
  # Closeness Centralization
  cls_vals <- closeness(net, g = geodist(net)$gdist)
  centralization_cls <- if (length(cls_vals) > 0) {
    (max(cls_vals) * (size - 1) - sum(max(cls_vals) - cls_vals)) / ((size - 1)^2)
  } else {
    NA
  }
  
  # Clique Metrics - Filter cliques of size >= 3
  clique_info <- sna::clique.census(net, mode = "graph", tabulate.by.vertex = FALSE)
  clique_counts <- clique_info$clique.count
  valid_sizes <- which(as.numeric(names(clique_counts)) >= 3 & clique_counts > 0)
  
  total_cliques <- if (length(valid_sizes) > 0) sum(clique_counts[valid_sizes]) else 0
  max_clique_size <- if (length(valid_sizes) > 0) max(valid_sizes) else NA
  min_clique_size <- if (length(valid_sizes) > 0) min(valid_sizes) else NA

  # Output Data Frame
  data.frame(
    Network_Type = network_type,
    Stage = stage,
    Size = size,
    Edges = edges,
    Density = round(density_val, 4),
    Avg_Degree = round(avg_degree_val, 2),
    Components = num_components,
    Isolates = isolates_count,
    
    Global_Transitivity = round(global_transitivity, 4),
    Local_Transitivity = round(local_transitivity, 4),

    Diameter = diameter_val,
    Average_Path_Length = round(avg_path_length, 4),
    
    Degree_Centralization = round(centralization_deg, 4),
    Betweenness_Centralization = round(centralization_btw, 4),
    Closeness_Centralization = round(centralization_cls, 4),
    
    Cliques_Total = total_cliques,
    Cliques_Max_Size = max_clique_size,
    Cliques_Min_Size = min_clique_size
  )
}
```

Read files and calculate metrics for all 18 networks

```{r}
# Define file paths and labels
network_files <- expand.grid(
  type = c("co_retweet", "quote", "reply"),
  stage = 1:6
) %>%
  mutate(
    file_path = paste0("data/adj_matrix_stage", stage, 
                       ifelse(type == "co_retweet", "", paste0("_", type)), ".csv"),
    network_label = case_when(
      type == "co_retweet" ~ "Co-Retweet",
      type == "quote" ~ "Quote Path Co-Retweet",
      type == "reply" ~ "Reply Path Co-Retweet"
    )
  )

# Compute all metrics
all_metrics <- purrr::pmap_dfr(
  list(network_files$file_path, network_files$network_label, network_files$stage),
  calculate_metrics_statnet
)

# Final Table View
print(all_metrics)

# Save Results to CSV
write.csv(all_metrics, "data/network_metrics_summary.csv", row.names = FALSE)

```

### Data Summary in Tables

| Network_Type          | Stage | Size | Edges | Density | Avg_Degree | Components | Isolates |
|:--------|---------|---------|---------|---------|---------|---------|---------|
| Co-Retweet            | 1     | 112  | 253   | 0.0407  | 9.04       | 1          | 89       |
| Quote Path Co-Retweet | 1     | 112  | 0     | 0.0000  | 0.00       | 0          | 112      |
| Reply Path Co-Retweet | 1     | 112  | 0     | 0.0000  | 0.00       | 0          | 112      |
| Co-Retweet            | 2     | 112  | 420   | 0.0676  | 15.00      | 2          | 71       |
| Quote Path Co-Retweet | 2     | 112  | 420   | 0.0676  | 15.00      | 2          | 71       |
| Reply Path Co-Retweet | 2     | 112  | 420   | 0.0676  | 15.00      | 2          | 71       |
| Co-Retweet            | 3     | 112  | 28    | 0.0045  | 1.00       | 1          | 104      |
| Quote Path Co-Retweet | 3     | 112  | 28    | 0.0045  | 1.00       | 1          | 104      |
| Reply Path Co-Retweet | 3     | 112  | 28    | 0.0045  | 1.00       | 1          | 104      |
| Co-Retweet            | 4     | 112  | 77    | 0.0124  | 2.75       | 4          | 86       |
| Quote Path Co-Retweet | 4     | 112  | 57    | 0.0092  | 2.04       | 2          | 96       |
| Reply Path Co-Retweet | 4     | 112  | 77    | 0.0124  | 2.75       | 4          | 86       |
| Co-Retweet            | 5     | 112  | 26    | 0.0042  | 0.93       | 1          | 103      |
| Quote Path Co-Retweet | 5     | 112  | 6     | 0.0010  | 0.21       | 1          | 108      |
| Reply Path Co-Retweet | 5     | 112  | 21    | 0.0034  | 0.75       | 1          | 105      |
| Co-Retweet            | 6     | 112  | 10    | 0.0016  | 0.36       | 1          | 107      |
| Quote Path Co-Retweet | 6     | 112  | 10    | 0.0016  | 0.36       | 1          | 107      |
| Reply Path Co-Retweet | 6     | 112  | 10    | 0.0016  | 0.36       | 1          | 107      |

**Table 1: Basic Network Structure Over Time**

| Network_Type          | Stage | Global_Transitivity | Local_Transitivity |
|:----------------------|-------|---------------------|--------------------|
| Co-Retweet            | 1     | 1.000               | 0.2054             |
| Quote Path Co-Retweet | 1     | 1.000               | 0.0000             |
| Reply Path Co-Retweet | 1     | 1.000               | 0.0000             |
| Co-Retweet            | 2     | 1.000               | 0.3661             |
| Quote Path Co-Retweet | 2     | 1.000               | 0.3661             |
| Reply Path Co-Retweet | 2     | 1.000               | 0.3661             |
| Co-Retweet            | 3     | 1.000               | 0.0714             |
| Quote Path Co-Retweet | 3     | 1.000               | 0.0714             |
| Reply Path Co-Retweet | 3     | 1.000               | 0.0714             |
| Co-Retweet            | 4     | 1.000               | 0.2321             |
| Quote Path Co-Retweet | 4     | 1.000               | 0.1429             |
| Reply Path Co-Retweet | 4     | 1.000               | 0.2321             |
| Co-Retweet            | 5     | 1.000               | 0.0740             |
| Quote Path Co-Retweet | 5     | 1.000               | 0.0357             |
| Reply Path Co-Retweet | 5     | 1.000               | 0.0625             |
| Co-Retweet            | 6     | 1.000               | 0.0446             |
| Quote Path Co-Retweet | 6     | 1.000               | 0.0446             |
| Reply Path Co-Retweet | 6     | 1.000               | 0.0446             |

**Table 2: Transitivity Metrics Over Time**

| Network_Type          | Stage | Diameter | Average_Path_Length |
|:----------------------|-------|----------|---------------------|
| Co-Retweet            | 1     | 1        | 0.8188              |
| Quote Path Co-Retweet | 1     | 0        | 0.0000              |
| Reply Path Co-Retweet | 1     | 0        | 0.0000              |
| Co-Retweet            | 2     | 1        | 0.8824              |
| Quote Path Co-Retweet | 2     | 1        | 0.8824              |
| Reply Path Co-Retweet | 2     | 1        | 0.8824              |
| Co-Retweet            | 3     | 1        | 0.3333              |
| Quote Path Co-Retweet | 3     | 1        | 0.3333              |
| Reply Path Co-Retweet | 3     | 1        | 0.3333              |
| Co-Retweet            | 4     | 1        | 0.5789              |
| Quote Path Co-Retweet | 4     | 1        | 0.5044              |
| Reply Path Co-Retweet | 4     | 1        | 0.5789              |
| Co-Retweet            | 5     | 2        | 0.5000              |
| Quote Path Co-Retweet | 5     | 1        | 0.0968              |
| Reply Path Co-Retweet | 5     | 1        | 0.2727              |
| Co-Retweet            | 6     | 1        | 0.1515              |
| Quote Path Co-Retweet | 6     | 1        | 0.1515              |
| Reply Path Co-Retweet | 6     | 1        | 0.1515              |

**Table 3: Network Distance Metrics Over Time**

| Network_Type | Stage | Degree_Centralization | Betweenness_Centralization | Closeness_Centralization |
|:--------------|---------------|---------------|---------------|---------------|
| Co-Retweet | 1 | 0.0786 | 0.0000 | 0.0000 |
| Quote Path Co-Retweet | 1 | 0.0000 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 1 | 0.0000 | 0.0000 | 0.0000 |
| Co-Retweet | 2 | 0.1325 | 0.0000 | 0.0000 |
| Quote Path Co-Retweet | 2 | 0.1325 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 2 | 0.1325 | 0.0000 | 0.0000 |
| Co-Retweet | 3 | 0.0080 | 0.0000 | 0.0000 |
| Quote Path Co-Retweet | 3 | 0.0080 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 3 | 0.0080 | 0.0000 | 0.0000 |
| Co-Retweet | 4 | 0.0237 | 0.0000 | 0.0000 |
| Quote Path Co-Retweet | 4 | 0.0172 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 4 | 0.0237 | 0.0000 | 0.0000 |
| Co-Retweet | 5 | 0.0071 | 0.0008 | 0.0000 |
| Quote Path Co-Retweet | 5 | 0.0015 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 5 | 0.0058 | 0.0000 | 0.0000 |
| Co-Retweet | 6 | 0.0026 | 0.0000 | 0.0000 |
| Quote Path Co-Retweet | 6 | 0.0026 | 0.0000 | 0.0000 |
| Reply Path Co-Retweet | 6 | 0.0026 | 0.0000 | 0.0000 |

**Table 4: Network Centralization Over Time**

| Network_Type          | Stage | Cliques_Total | Cliques_Max_Size | Cliques_Min_Size |
|:--------------|---------------|---------------|---------------|---------------|
| Co-Retweet            | 1     | 1             | 23               | 23               |
| Quote Path Co-Retweet | 1     | 0             | NA               | NA               |
| Reply Path Co-Retweet | 1     | 0             | NA               | NA               |
| Co-Retweet            | 2     | 2             | 25               | 16               |
| Quote Path Co-Retweet | 2     | 2             | 25               | 16               |
| Reply Path Co-Retweet | 2     | 2             | 25               | 16               |
| Co-Retweet            | 3     | 1             | 8                | 8                |
| Quote Path Co-Retweet | 3     | 1             | 8                | 8                |
| Reply Path Co-Retweet | 3     | 1             | 8                | 8                |
| Co-Retweet            | 4     | 4             | 9                | 5                |
| Quote Path Co-Retweet | 4     | 2             | 9                | 7                |
| Reply Path Co-Retweet | 4     | 4             | 9                | 5                |
| Co-Retweet            | 5     | 2             | 7                | 4                |
| Quote Path Co-Retweet | 5     | 1             | 4                | 4                |
| Reply Path Co-Retweet | 5     | 1             | 7                | 7                |
| Co-Retweet            | 6     | 1             | 5                | 5                |
| Quote Path Co-Retweet | 6     | 1             | 5                | 5                |
| Reply Path Co-Retweet | 6     | 1             | 5                | 5                |

**Table 5: Clique Structural Features Over Time**

### Univariate Analysis and Visualization

#### Network Size and Density

The network size remains constant across all networks (112 nodes), while density exhibits considerable variation across different network types and temporal stages.

```{r}
# Example plot for Density
ggplot(all_metrics, aes(x = Network_Type, y = Density, fill = Network_Type)) +
  geom_boxplot() +
  labs(title = "Density Distribution Across Network Types",
       x = "Network Type", y = "Density") +
  theme_classic() +
  theme(
    text = element_text(family = "serif")
  )

```

Direct co-retweet networks exhibit higher density values, consistent with immediate and redundant amplification behavior. Quote and reply pathways show lower density, indicating sparser and more selective dissemination structures.

#### Transitivity (Global and Local)

Global transitivity remains consistently high. Local transitivity exhibits greater variation, highlighting differences in clustering tendencies.

```{r}
# Example plot for Local Transitivity
ggplot(all_metrics, aes(x = Network_Type, y = Local_Transitivity, fill = Network_Type)) +
  geom_boxplot() +
  labs(title = "Local Transitivity Distribution",
       x = "Network Type", y = "Local Transitivity") +        
  theme_classic() +
  theme(
    text = element_text(family = "serif")
  )

```

Direct co-retweet networks exhibit higher median clustering, suggesting tighter local cohesion formed through immediate co-amplification. Quote pathway networks show lower clustering tendencies, aligning with their role in selective narrative reframing. Reply pathway networks demonstrate a wide range of local transitivity values, indicating the presence of both fragmented and highly clustered conversational subgroups.

#### Path Length and Diameter

Direct co-retweet networks exhibit shorter average path lengths and smaller diameters, consistent with broadcast-style information dissemination. Reply pathway networks show higher values, reflecting fragmented and extended conversational structures.

```{r}
# Example plot for Average Path Length
ggplot(all_metrics, aes(x = Network_Type, y = Average_Path_Length, fill = Network_Type)) +
  geom_boxplot() +
  labs(title = "Average Path Length Across Networks",
       x = "Network Type", y = "Average Path Length")+
  theme_classic() +
  theme(
    text = element_text(family = "serif")
  )
```

Direct co-retweet networks exhibit the longest average path lengths, suggesting that despite the immediacy of retweeting behavior, these networks lack cohesive structural shortcuts typically found in highly efficient broadcast systems. Quote pathway networks show the shortest average path lengths, indicating tighter, more localized amplification likely centered around shared narrative framings. Reply pathway networks display moderate path lengths but with greater variability, reflecting diverse conversational chains and fragmented dialogues.

#### Centralization Metrics

Degree, betweenness, and closeness centralization metrics provide insight into the dominance of influential nodes. Reply pathway networks generally exhibit higher local degree centralization, as predicted.

```{r}
# Degree Centralization Plot (To be inserted)
ggplot(all_metrics, aes(x = Network_Type, y = Degree_Centralization, fill = Network_Type)) +
  geom_boxplot() +
  labs(title = "Degree Centralization Across Network Types",
       x = "Network Type", y = "Degree Centralization") +
  theme_classic() +
  theme(
    text = element_text(family = "serif")
  )


```

Direct co-retweet networks show the highest degree centralization, indicating that a small subset of users played a dominant role in content amplification by repeatedly retweeting the same misinformation messages. In contrast, both quote and reply pathway networks exhibit low degree centralization, suggesting a more distributed amplification structure where no single retweeter overwhelmingly dominated the discourse. Notably, this challenges the initial hypothesis that reply pathways would demonstrate higher local centralization due to the prominence of conversational hubs in emotionally charged discussions.

#### Summary Statistics for Key Network Metrics

```{r}

all_metrics %>%
  group_by(Network_Type) %>%
  summarise(
    Density_Mean = round(mean(Density), 4),
    Density_SD = round(sd(Density), 4),
    Local_Trans_Mean = round(mean(Local_Transitivity), 4),
    Avg_Path_Length = round(mean(Average_Path_Length), 4)
  ) %>%
  knitr::kable(caption = "Summary Statistics for Key Network Metrics")

```

In terms of density, direct co-retweet networks exhibit the highest mean density (0.0218), confirming their tendency for redundant amplification within tightly connected structures. Quote and reply pathway networks have comparable, lower densities, indicating sparser co-dissemination patterns.

In terms of local transitivity, direct co-retweet networks also have the highest mean local transitivity (0.1656), suggesting stronger localized clustering. Reply pathways show slightly higher clustering tendencies (0.1295) than quote pathways (0.1101), consistent with conversational thread formations.

In terms of average path length, direct co-retweet networks display the shortest average path length (0.5442), in line with their broadcast-like amplification style. Quote and reply pathways have longer path lengths (0.3281 and 0.3698, respectively), indicating more layered and fragmented dissemination processes.

```{r}

# Helper function to load a PNG as ggplot object
load_network_image <- function(filename) {
  img <- png::readPNG(paste0("plot/", filename))
}

# Display Stage 1 Networks as Example
p1 <- load_network_image("Co-Retweet-Stage1.png")
p2 <- load_network_image("Quote-Path-Co-Retweet-Stage1.png") 
p3 <- load_network_image("Reply-Path-Co-Retweet-Stage1.png")

```

### Expected & actual findings based on hypotheses

#### H1: Density Differences Across Network Types

**Hypothesis:** direct co-retweet networks will exhibit higher density than quote pathway and reply pathway co-retweet networks, reflecting more immediate and redundant amplification of misinformation.

**Null Hypothesis**: There is no significant difference in network density across the three co-dissemination network types.

**Alternative Hypothesis:** At least one network type exhibits significantly different density compared to the others.

A one-way ANOVA was performed to examine the differences in network density across the three network types (I learned this from class statistical methodology last semester. It is better than t-test in this context).

```{r}
# ANOVA for Density
density_aov <- aov(Density ~ Network_Type, data = all_metrics)
summary(density_aov)

```

**ANOVA Results**

| Source       | Df  | Sum Sq   | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|----------|----------|---------|---------|
| Network_Type | 2   | 0.000221 | 0.000110 | 0.158   | 0.855   |
| Residuals    | 15  | 0.010488 | 0.000699 |         |         |

Based on visual inspection of the boxplot, direct co-retweet networks appear to have higher density values, which aligns with the theoretical expectation that immediate retweeting behavior leads to more redundant network structures. However, the ANOVA results indicate that these observed differences are not statistically significant (F(2, 15) = 0.158, p = 0.855).

Given the high p-value, we fail to reject the null hypothesis, concluding that there is no statistically significant difference in density across the three network types. Despite the observed higher mean density in direct co-retweet networks, the large within-group variance dilutes the effect, and no meaningful distinction can be established through inferential statistics.

#### H2: Transitivity Differences Across Network Types

**Hypothesis**: Quote pathway co-retweet networks will exhibit the highest transitivity among the three network types, indicating a greater tendency for localized interpretive clustering through narrative reframing.

**Null Hypothesis:** There is no significant difference in Local Transitivity across direct co-retweet, quote pathway co-retweet, and reply pathway co-retweet networks.

**Alternative Hypothesis**: Quote pathway co-retweet networks will exhibit the highest Local Transitivity among the three network types.

```{r}
# H2 Local Transitivity Analysis - ANOVA
trans_aov <- aov(Local_Transitivity ~ Network_Type, data = all_metrics)
summary(trans_aov)

```

| Source       | Df  | Sum Sq  | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|---------|----------|---------|---------|
| Network_Type | 2   | 0.00952 | 0.004759 | 0.268   | 0.769   |
| Residuals    | 15  | 0.26652 | 0.017768 |         |         |

The ANOVA test revealed no statistically significant differences in Local Transitivity across the three network types (F(2, 15) = 0.268, p = 0.769). Despite visual patterns suggesting that direct co-retweet networks might exhibit slightly higher clustering, this difference is not statistically supported.

H2 is not supported by the data. Contrary to expectations, Quote Path Co-Retweet networks did not exhibit the highest Local Transitivity. The observed clustering patterns were relatively low and stable across all network types, indicating that narrative reframing does not necessarily foster tighter localized communities in the amplification backbones of misinformation networks.

#### H3: Degree Centralization Differences Across Network Types

**Hypothesis:** Reply pathway co-retweet networks are expected to demonstrate higher local degree centralization compared to direct and quote pathway networks, reflecting the dominance of conversational hubs in emotionally charged discussions.

**Null Hypothesis:** There is no significant difference in Degree Centralization across direct co-retweet, quote pathway co-retweet, and reply pathway co-retweet networks.

**Alternative Hypothesis:** Reply pathway co-retweet networks will exhibit the highest Degree Centralization among the three network types.

```{r}
# H3 Degree Centralization Analysis - ANOVA
central_aov <- aov(Degree_Centralization ~ Network_Type, data = all_metrics)
summary(central_aov)

```

| Source       | Df  | Sum Sq  | Mean Sq  | F value | Pr(\>F) |
|--------------|-----|---------|----------|---------|---------|
| Network_Type | 2   | 0.00082 | 0.000409 | 0.151   | 0.861   |
| Residuals    | 15  | 0.04061 | 0.002707 |         |         |

The ANOVA test revealed no statistically significant differences in Degree Centralization across the three network types (F(2, 15) = 0.151, p = 0.861). Although the initial hypothesis expected reply pathway networks to exhibit the highest degree centralization due to the dominance of conversational hubs, the observed data did not support this claim.

H3 is not supported by the data. Contrary to expectations, direct co-retweet networks showed slightly higher centralization values, while reply and quote pathways maintained lower and comparable levels of centralization. This suggests that even in emotionally charged reply chains, influential conversational hubs did not emerge prominently within the amplification backbone structures.

#### H4: Average Path Length Differences Across Network Types

**Hypothesis:** Reply pathway co-retweet networks will have longer average path lengths than the other two network types, suggesting more fragmented conversational clusters and less efficient information flow.

**Null Hypothesis:** There is no significant difference in Average Path Length across direct co-retweet, quote pathway co-retweet, and reply pathway co-retweet networks.

**Alternative Hypothesis:** Reply pathway co-retweet networks exhibit significantly longer Average Path Lengths than direct and quote pathway networks.

```{r}
# H4 Average Path Length Analysis - ANOVA
path_aov <- aov(Average_Path_Length ~ Network_Type, data = all_metrics)
summary(path_aov)

```

| Source       | Df  | Sum Sq | Mean Sq | F value | Pr(\>F) |
|--------------|-----|--------|---------|---------|---------|
| Network_Type | 2   | 0.1577 | 0.07883 | 0.830   | 0.455   |
| Residuals    | 15  | 1.4240 | 0.09493 |         |         |

The ANOVA test indicates no statistically significant differences in Average Path Length across the three network types (F(2, 15) = 0.83, p = 0.455).

Although descriptive statistics and visualizations suggested that reply pathway networks tend to exhibit slightly higher path lengths and greater variability, this difference is not statistically supported by the analysis. Consequently, H4 is not supported. The amplification structures across the three pathways appear to maintain comparable levels of information flow efficiency, without substantial fragmentation in reply networks as originally hypothesized.

#### H5: Temporal Structural Changes in Amplification Networks

**Hypothesis**: The structural properties of amplification backbones, including density, transitivity, degree centralization, and average path length, will vary significantly across misinformation lifecycle stages. Networks formed during earlier events are expected to differ structurally from those emerging in later stages, indicating shifts in amplification dynamics over time.

**Null Hypothesis**: There is no significant difference in network structural properties across the six misinformation lifecycle stages.

**Alternative Hypothesis:** At least one structural metric (e.g., density) varies significantly across different stages of misinformation dissemination.

##### Density Change Over Stages

```{r}
# Plot for Density Change Across Stages
ggplot(all_metrics, aes(x = Stage, y = Density, color = Network_Type, linetype = Network_Type)) +
  geom_line(size = 1) +
  geom_point(size = 2, shape = 21, fill = "white") + 
  scale_color_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  scale_linetype_manual(values = c("solid", "dashed", "dotdash")) + 
  theme_classic() +
  labs(title = "Density Change Over Stages", x = "Stage", y = "Density") +
  theme(
    text = element_text(family = "serif"),
    legend.position = "right"
  )

```

The line plot shows that network density peaks at Stage 2 for all three network types, indicating highly active early amplification shortly after the initial misinformation dissemination. Among them, direct co-retweet and reply pathway networks exhibit the sharpest peaks, while the quote pathway shows a slightly lower but still prominent peak. After Stage 2, density sharply declines across all network types and remains low in subsequent stages, reflecting reduced amplification activities over time. This suggests that most co-dissemination behaviors concentrate heavily during the early lifecycle of misinformation, with minimal structural reinforcement in later stages.

```{r}
covid_wuhan_misinfo |>
  select(date,keywords) |>
  group_by(date,keywords) |>
  arrange(date) |>
  unique()
```

To better capture the temporal dynamics of misinformation dissemination, we reclassified the six original stages into two broader periods based on the observed event timeline. As shown in the figure, the early stage (Stages 1-4) occurred between March and June 2020, a period characterized by an intense initial burst of misinformation narratives surrounding the COVID-19 lab-leak theory. The late stage (Stages 5-6), spanning from January to August 2021, represents a phase of reactivation and residual discussions following the initial outbreak of these narratives. This binary temporal segmentation allows for a clearer examination of early amplification dynamics versus later stages of sustained but diminished dissemination.

```{r}
all_metrics <- all_metrics %>%
  mutate(Stage_Group = ifelse(Stage %in% c(1, 2, 3, 4), "Early", "Late"))

direct_density <- all_metrics %>%
  filter(Network_Type == "Co-Retweet")

t.test(Density ~ Stage_Group, data = direct_density)

# Quote Path Co-Retweet
quote_density <- all_metrics %>%
  filter(Network_Type == "Quote Path Co-Retweet")

t.test(Density ~ Stage_Group, data = quote_density)

# Reply Path Co-Retweet
reply_density <- all_metrics %>%
  filter(Network_Type == "Reply Path Co-Retweet")

t.test(Density ~ Stage_Group, data = reply_density)

```

**Density Change Over Stages**

| Comparison | t      | df     | p-value | 95% CI              |
|------------|--------|--------|---------|---------------------|
| Co-Retweet | 1.9669 | 3.0486 | 0.1424  | \[-0.0171, 0.0739\] |
| Quote Path | 1.1986 | 3.0021 | 0.3167  | \[-0.0314, 0.0695\] |
| Reply Path | 1.1842 | 3.0196 | 0.3211  | \[-0.0312, 0.0685\] |

The Welch Two-Sample t-tests indicate no statistically significant differences in network density between early and late stages across all three network types. Although the mean densities are consistently higher during the early stages—suggesting more intensive amplification during initial misinformation outbreaks—these differences are not statistically supported (all p-values \> 0.05).

H5 is not supported by the data. Despite observable temporal patterns in network density, the lack of statistically significant differences indicates that structural shifts over time are less pronounced than initially hypothesized. Amplification activities, while more active in the early stages, do not exhibit significant structural transformations in the network backbones when comparing early and late phases.

##### Transitivity Change Over Stages

```{r}
# Plot for Local Transitivity Change Across Stages
ggplot(all_metrics, aes(x = Stage, y = Local_Transitivity, color = Network_Type, linetype = Network_Type)) +
  geom_line(size = 1) +
  geom_point(size = 2, shape = 21, fill = "white") + 
  scale_color_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  scale_linetype_manual(values = c("solid", "dashed", "dotdash")) + 
  theme_classic() +
  labs(title = "Local Transitivity Change Over Stages", x = "Stage", y = "Local Transitivity") +
  theme(
    text = element_text(family = "serif"),
    legend.position = "right"
  )

```

The line plot shows that Local Transitivity peaks sharply at Stage 2 for all network types, reflecting highly clustered retweet behaviors during the early dissemination phase of misinformation. Co-retweet networks consistently maintain higher levels of local clustering compared to quote and reply pathways across stages. However, all network types exhibit a dramatic decline in transitivity after Stage 2, remaining low through later stages. This pattern suggests that early amplification efforts are highly community-centered, while later dissemination phases become more fragmented and less clustered.

```{r}
# Transitivity Temporal Change Analysis

# Direct Co-Retweet
direct_trans <- all_metrics %>%
  filter(Network_Type == "Co-Retweet")
t.test(Local_Transitivity ~ Stage_Group, data = direct_trans)

# Quote Path Co-Retweet
quote_trans <- all_metrics %>%
  filter(Network_Type == "Quote Path Co-Retweet")
t.test(Local_Transitivity ~ Stage_Group, data = quote_trans)

# Reply Path Co-Retweet
reply_trans <- all_metrics %>%
  filter(Network_Type == "Reply Path Co-Retweet")
t.test(Local_Transitivity ~ Stage_Group, data = reply_trans)


```

**Welch Two-Sample t-Test Results**

| Comparison | t      | df     | p-value | 95% CI              |
|------------|--------|--------|---------|---------------------|
| Co-Retweet | 2.565  | 3.3308 | 0.0746  | \[-0.0277, 0.3466\] |
| Quote Path | 1.3225 | 3.0189 | 0.2773  | \[-0.1467, 0.3566\] |
| Reply Path | 1.3784 | 3.0704 | 0.2599  | \[-0.1456, 0.3733\] |

The Welch Two-Sample t-tests reveal no statistically significant differences in Local Transitivity between early and late stages across all network types (p-values \> 0.05). However, for co-retweet networks, the p-value (0.0746) approaches marginal significance, suggesting a potential trend toward greater localized clustering during early stages of misinformation dissemination. Despite this trend, the lack of statistically significant results prevents strong conclusions.

In sum, while the visual analysis suggests more cohesive amplification structures during early stages, particularly within co-retweet networks, the statistical evidence remains inconclusive. H5 is therefore not supported in the context of transitivity changes over time.

##### Degree Centralization Change Over Stages

```{r}
ggplot(all_metrics, aes(x = Stage, y = Degree_Centralization, color = Network_Type, linetype = Network_Type)) +
  geom_line(size = 1) +
  geom_point(size = 2, shape = 21, fill = "white") + 
  scale_color_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  scale_linetype_manual(values = c("solid", "dashed", "dotdash")) + 
  theme_classic() +
  labs(title = "Degree Centralization Change Over Stages", x = "Stage", y = "Degree Centralization") +
  theme(
    text = element_text(family = "serif"),
    legend.position = "right"
  )

```

The plot reveals that degree centralization peaks sharply at Stage 2 across all network types, suggesting that during early misinformation dissemination, amplification behaviors were highly centralized around a few influential hubs. However, after Stage 2, degree centralization dropped significantly and remained low throughout later stages. This suggests that the dominance of central hubs in spreading misinformation was primarily an early-stage phenomenon and did not persist as misinformation narratives evolved.

```{r}
# Degree Centralization Temporal Change Analysis

# Direct Co-Retweet
direct_central <- all_metrics %>%
  filter(Network_Type == "Co-Retweet")
t.test(Degree_Centralization ~ Stage_Group, data = direct_central)

# Quote Path Co-Retweet
quote_central <- all_metrics %>%
  filter(Network_Type == "Quote Path Co-Retweet")
t.test(Degree_Centralization ~ Stage_Group, data = quote_central)

# Reply Path Co-Retweet
reply_central <- all_metrics %>%
  filter(Network_Type == "Reply Path Co-Retweet")
t.test(Degree_Centralization ~ Stage_Group, data = reply_central)

```

**Welch Two-Sample t-Test Results**

| Comparison | t      | df     | p-value | 95% CI              |
|------------|--------|--------|---------|---------------------|
| Co-Retweet | 1.9661 | 3.0376 | 0.1428  | \[-0.0332, 0.1456\] |
| Quote Path | 1.1968 | 3.0019 | 0.3173  | \[-0.0619, 0.1367\] |
| Reply Path | 1.1918 | 3.0161 | 0.3186  | \[-0.0613, 0.1349\] |

The Welch Two-Sample t-tests show that although the early stages consistently demonstrate higher mean degree centralization across all network types, these differences are not statistically significant (all p-values \> 0.05). This implies that despite observable peaks in centralization during early amplification phases, these structural dynamics do not reflect statistically significant transformations between early and late stages.

H5 is not supported by the degree centralization analysis. While early misinformation amplification activities show higher centralization, these structural patterns do not demonstrate significant temporal change. The role of dominant hubs in amplification remains confined to the early stages but does not statistically differ from later stages in a significant manner.

##### Average Path Length Change Over Stages

```{r}
# Average Path Length Change Over Stages Visualization
ggplot(all_metrics, aes(x = Stage, y = Average_Path_Length, color = Network_Type, linetype = Network_Type)) +
  geom_line(size = 1) +
  geom_point(size = 2, shape = 21, fill = "white") + 
  scale_color_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  scale_linetype_manual(values = c("solid", "dashed", "dotdash")) + 
  theme_classic() +
  labs(title = "Average Path Length Change Over Stages", 
       x = "Stage", 
       y = "Average Path Length") +
  theme(
    text = element_text(family = "serif"),
    legend.position = "right"
  )

```

The line plot shows distinct temporal patterns in average path length across the three network types. All networks exhibit the highest average path lengths at Stage 2, indicating that misinformation narratives required longer dissemination chains during the peak of early amplification. Following this peak, average path lengths decrease across all network types, suggesting more direct and condensed dissemination patterns in later stages. However, direct co-retweet networks maintain slightly higher average path lengths throughout the stages, whereas quote and reply pathways demonstrate shorter and more fragmented dissemination routes in the later phases.

```{r}
# Average Path Length Temporal Change Analysis

# Direct Co-Retweet
direct_path <- all_metrics %>%
  filter(Network_Type == "Co-Retweet")
t.test(Average_Path_Length ~ Stage_Group, data = direct_path)

# Quote Path Co-Retweet
quote_path <- all_metrics %>%
  filter(Network_Type == "Quote Path Co-Retweet")
t.test(Average_Path_Length ~ Stage_Group, data = quote_path)

# Reply Path Co-Retweet
reply_path <- all_metrics %>%
  filter(Network_Type == "Reply Path Co-Retweet")
t.test(Average_Path_Length ~ Stage_Group, data = reply_path)


```

**Welch Two-Sample t-Test Results**

| Comparison | t      | df     | p-value | 95% CI              |
|------------|--------|--------|---------|---------------------|
| Co-Retweet | 1.5272 | 2.1098 | 0.2600  | \[-0.5508, 1.2060\] |
| Quote Path | 1.6479 | 3.1300 | 0.1941  | \[-0.2712, 0.8829\] |
| Reply Path | 1.2033 | 3.5458 | 0.3030  | \[-0.3379, 0.8111\] |

Welch Two-Sample t-tests reveal no statistically significant differences in average path length between the early and late stages across all three network types (all p-values \> 0.05). Although the means indicate that average path lengths are higher during the early stage of misinformation dissemination—suggesting more extended diffusion pathways—these differences are not statistically supported.

H5 is not supported by the data. Despite observable patterns suggesting longer dissemination chains during the initial outbreak phases, the statistical evidence does not confirm significant structural changes in average path length over time. The results imply that while the temporal context influences amplification patterns to some extent, the structural configuration of dissemination pathways remains relatively stable between early and late stages.

------------------------------------------------------------------------

Based on the statistical analyses, H5 is not supported by the data. While the visualizations suggest that network structures exhibit higher density, greater local transitivity, higher centralization, and longer average path lengths during the early stages of misinformation dissemination—consistent with theoretical expectations—these observed patterns are not statistically significant. The Welch two-sample t-tests for all structural metrics resulted in p-values above the conventional significance threshold (p \> 0.05), indicating that the observed differences could have occurred by chance.

In summary, although there are observable numerical differences between early and late stages, these differences do not meet the criteria for statistical significance. Therefore, there is insufficient empirical evidence to conclude that the structural properties of amplification backbones change significantly over time. That is, theoretically expected patterns were observed, but the results lack statistical support, and the hypothesis is not confirmed.

### CUG Test

In the preceding analyses, none of the hypotheses regarding structural differences across network types and temporal stages were statistically supported. While these null results suggest limited observable structural variation, they do not rule out the possibility that the retweeter amplification backbone networks possess distinctive, non-random configurations. To further examine this, a Conditional Uniform Graph (CUG) test is applied to assess whether the observed network metrics significantly deviate from random graph expectations.

The CUG test conditions on network size because the focus is on how these actors connect, not how many are involved. By holding the actor set constant, the test can reveal whether the observed network patterns—such as being very sparse or highly connected—are likely the result of intentional amplification behaviors rather than random chance. This method provides a fair comparison by ensuring that differences in network structure are not simply due to having more or fewer participants.

#### CUG Test for Density

```{r}

valid_files <- c(
  "adj_matrix_stage1.csv", "adj_matrix_stage1_quote.csv", "adj_matrix_stage1_reply.csv",
  "adj_matrix_stage2.csv", "adj_matrix_stage2_quote.csv", "adj_matrix_stage2_reply.csv",
  "adj_matrix_stage3.csv", "adj_matrix_stage3_quote.csv", "adj_matrix_stage3_reply.csv",
  "adj_matrix_stage4.csv", "adj_matrix_stage4_quote.csv", "adj_matrix_stage4_reply.csv",
  "adj_matrix_stage5.csv", "adj_matrix_stage5_quote.csv", "adj_matrix_stage5_reply.csv",
  "adj_matrix_stage6.csv", "adj_matrix_stage6_quote.csv", "adj_matrix_stage6_reply.csv"
)

all_files <- list.files("data")
target_files <- all_files[all_files %in% valid_files]

info <- data.frame(
  File = target_files,
  Network_Type = ifelse(grepl("quote", target_files), "Quote Path Co-Retweet",
                        ifelse(grepl("reply", target_files), "Reply Path Co-Retweet", "Direct Co-Retweet")),
  Stage = as.numeric(gsub(".*stage([0-9]+).*", "\\1", target_files))
)

results <- data.frame()

for (i in 1:nrow(info)) {
  file_path <- paste0("data/", info$File[i])
  adj_matrix <- as.matrix(read.csv(file_path, row.names = 1))
  
  net <- network(adj_matrix, directed = FALSE, matrix.type = "adjacency")
  gden <- network.density(net)
  
  # CUG Test (Conditioning only on Size)
  cug_result <- cug.test(net, gden, cmode = "size", reps = 1000)
  
  p_greater_equal <- cug_result$pgte  # Observed density higher than random
  p_less_equal <- cug_result$plte     # Observed density lower than random
  
  results <- rbind(results, data.frame(
    Network_Type = info$Network_Type[i],
    Stage = info$Stage[i],
    CUG_Prob_Higher = p_greater_equal,
    CUG_Prob_Lower = p_less_equal
  ))
}

results <- results[order(results$Stage, results$Network_Type), ]
print(results)

```

The CUG test results for density show that in all cases, the observed network densities are significantly lower than those generated by random networks of the same size (`CUG_Prob_Higher` = 1.000 i.e. `Pr(x >= Obs)` in all cases). This indicates that the retweeter amplification backbones are extremely sparse, even compared to what would be expected by random chance.

This extreme sparsity suggests that the networks do not form dense, tightly connected structures but instead exhibit highly fragmented patterns. Rather than retweeters frequently interacting within the same network stage, most remain isolated or only weakly connected. This likely results from the dispersed temporal activation of retweeters, where individuals participate in misinformation amplification at different times and in different events. As a consequence, while occasional bursts of coordinated amplification may occur, the overall network remains disconnected, limiting the formation of cohesive amplification communities.

#### CUG Test for Transtivity

```{r}
calculate_local_transitivity <- function(adj_matrix) {
  n <- nrow(adj_matrix)
  if (n == 0) return(0)  
  
  clustering_coeffs <- numeric(n)
  
  for (i in 1:n) {
    neighbors <- which(adj_matrix[i, ] == 1)
    k_i <- length(neighbors)
    if (k_i < 2) {
      clustering_coeffs[i] <- 0
    } else {
      subgraph <- adj_matrix[neighbors, neighbors]
      actual_links <- sum(subgraph) / 2  # Undirected graph
      possible_links <- k_i * (k_i - 1) / 2
      clustering_coeffs[i] <- actual_links / possible_links
    }
  }
  
  mean(clustering_coeffs, na.rm = TRUE)
}


results <- data.frame()

for (i in 1:nrow(info)) {
  file_path <- paste0("data/", info$File[i])
  adj_matrix <- as.matrix(read.csv(file_path, row.names = 1))
  net <- network(adj_matrix, directed = FALSE, matrix.type = "adjacency")
  
  # Global Transitivity
  cug_global <- cug.test(net, FUN = gtrans, cmode = "size", reps = 1000)
  results <- rbind(results, data.frame(
    Network_Type = info$Network_Type[i],
    Stage = info$Stage[i],
    Metric = "Global Transitivity",
    CUG_Prob_Higher = cug_global$pgte,
    CUG_Prob_Lower = cug_global$plte
  ))
  
  # Local Transitivity
  cug_local <- cug.test(net, FUN = function(x) {
    adj_m <- as.matrix(x)
    calculate_local_transitivity(adj_m)
  }, cmode = "size", reps = 1000)
  
  results <- rbind(results, data.frame(
    Network_Type = info$Network_Type[i],
    Stage = info$Stage[i],
    Metric = "Local Transitivity (Mean)",
    CUG_Prob_Higher = cug_local$pgte,
    CUG_Prob_Lower = cug_local$plte
  ))
}


results <- results[order(results$Stage, results$Network_Type, results$Metric), ]
print(results)

```

The CUG test results for transitivity reveal a structural divergence between global and local patterns.

For Global Transitivity, all observed values fall at the low end of the simulated random distributions (`CUG_Prob_Higher` = 1.000 i.e. `Pr(x >= Obs)`), indicating that the observed global clustering is significantly lower than expected. This suggests that the retweeter amplification backbones lack cohesive global connectivity and do not form widespread, interconnected communities.

In contrast, Local Transitivity consistently shows `CUG_Prob_Lower` = 1.000 i.e. `Pr(x <= Obs)`, meaning the observed local clustering is significantly higher than in comparable random networks. Despite the overall sparsity and weak global cohesion, active retweeters tend to form tightly interconnected local clusters.

These findings suggest that the retweeter amplification backbones do not form large, well-connected global structures. Instead, localized pockets of strong connectivity emerge among engaged retweeters. This reflects a structural pattern of fragmented yet locally cohesive amplification behaviors, where small groups of actors actively reinforce each other's dissemination of misinformation but remain disconnected from the broader network.

#### CUG Test for Degree Centralization

```{r}

results <- data.frame()

for (i in 1:nrow(info)) {
  file_path <- paste0("data/", info$File[i])
  adj_matrix <- as.matrix(read.csv(file_path, row.names = 1))
  net <- network(adj_matrix, directed = FALSE, matrix.type = "adjacency")
  
  # CUG Test for Degree Centralization
  cug_degree <- cug.test(
    net,
    FUN = function(x) centralization(x, FUN = degree, cmode = "freeman"),
    cmode = "size",
    reps = 1000
  )
  
  # Append Results
  results <- rbind(results, data.frame(
    Network_Type = info$Network_Type[i],
    Stage = info$Stage[i],
    Metric = "Degree Centralization",
    CUG_Prob_Higher = cug_degree$pgte,
    CUG_Prob_Lower = cug_degree$plte
  ))
}

results <- results[order(results$Stage, results$Network_Type), ]
print(results)

```

The CUG test results for degree centralization consistently indicate that the observed networks exhibit significantly lower degree centralization than would be expected by chance (`CUG_Prob_Higher` ≈ 1.000 i.e. `Pr(x >= Obs)` in most cases). This finding suggests that the retweeter amplification backbones are structurally decentralized, lacking dominant hub nodes that typically drive information spread in highly centralized networks.

These results imply that, rather than revolving around a few influential retweeters, the amplification process is diffuse and fragmented. Retweeters do not frequently concentrate around key hubs but instead exhibit low levels of structural cohesion. This decentralized pattern may reflect the dispersed and independent nature of amplification behaviors, where individual retweeters contribute to the spread of misinformation without relying on or coordinating through central influential actors.

#### CUG Test for Average Path Length

```{r}
#| eval: false

results <- data.frame()

for (i in 1:nrow(info)) {
  file_path <- paste0("data/", info$File[i])
  adj_matrix <- as.matrix(read.csv(file_path, row.names = 1))
  
  net <- network(adj_matrix, directed = FALSE, matrix.type = "adjacency")
  
  apl_observed <- mean(geodist(net)$gdist[geodist(net)$gdist != Inf], na.rm = TRUE)
  
  # CUG Test for APL
  cug_apl <- cug.test(
    net,
    FUN = function(x) {
      dists <- geodist(x)$gdist
      valid_dists <- dists[dists != Inf]
      if (length(valid_dists) > 0) {
        return(mean(valid_dists, na.rm = TRUE))
      } else {
        return(NA)  
      }
    },
    cmode = "size",
    reps = 1000
  )

  results <- rbind(results, data.frame(
    Network_Type = info$Network_Type[i],
    Stage = info$Stage[i],
    Metric = "Average Path Length",
    CUG_Prob_Higher = cug_apl$pgte,
    CUG_Prob_Lower = cug_apl$plte
  ))
}

results <- results[order(results$Stage, results$Network_Type), ]
print(results)

```

| Network_Type | Stage | Metric | CUG_Prob_Higher | CUG_Prob_Lower |
|---------------|---------------|---------------|---------------|---------------|
| Direct Co-Retweet | 1 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 1 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 1 | Average Path Length | 1 | 0 |
| Direct Co-Retweet | 2 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 2 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 2 | Average Path Length | 1 | 0 |
| Direct Co-Retweet | 3 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 3 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 3 | Average Path Length | 1 | 0 |
| Direct Co-Retweet | 4 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 4 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 4 | Average Path Length | 1 | 0 |
| Direct Co-Retweet | 5 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 5 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 5 | Average Path Length | 1 | 0 |
| Direct Co-Retweet | 6 | Average Path Length | 1 | 0 |
| Quote Path Co-Retweet | 6 | Average Path Length | 1 | 0 |
| Reply Path Co-Retweet | 6 | Average Path Length | 1 | 0 |

The CUG test results for Average Path Length consistently indicate that the observed networks exhibit significantly shorter path lengths than those expected under random network conditions (`CUG_Prob_Higher` = 1.000 i.e. `Pr(x >= Obs)` across all cases). This finding suggests that the retweeter amplification backbones are structurally optimized to facilitate rapid information flow despite their overall sparse connectivity.

Rather than being uniformly fragmented, these networks appear to contain key structural shortcuts that reduce the average distance between nodes. Such efficiency may arise from the presence of highly connected hubs or selective activation of influential retweeters during critical misinformation events. As a result, information can traverse the network through relatively short paths, even if the overall density remains low.

#### Conclusion

Compared to random networks, the retweeter amplification backbones exhibit a distinct structural configuration characterized by extreme sparsity, weak global cohesion, strong local clustering, low centralization, and efficient information flow through short paths. Although these networks are highly fragmented and lack dense, interconnected communities, they form tightly knit local clusters where small groups of retweeters actively reinforce each other’s dissemination efforts. Unlike highly centralized structures dominated by influential hubs, these backbones are decentralized, with amplification behaviors dispersed across many actors rather than concentrated around key nodes. Despite their low density, the presence of structural shortcuts ensures that information can still spread rapidly, suggesting that these networks achieve amplification efficiency not through global integration but through selective, localized coordination and strategically positioned pathways.

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const toc = document.getElementById("TOC");
    if (toc) {
        const sourceLink = document.createElement("div");
        sourceLink.innerHTML = `
            <div class="toc-source">
                <a href="https://github.com/troy-yu-cheng/sna-final-paper" 
                   target="_blank" 
                   class="github-button">
                   <svg xmlns="http://www.w3.org/2000/svg" 
                        viewBox="0 0 24 24" 
                        width="16" 
                        height="16" 
                        fill="currentColor"
                        style="vertical-align: middle; margin-right: 5px;">
                     <path d="M12 0C5.373 0 0 5.373 0 12c0 5.303 3.438 9.8 8.207 11.387.6.113.82-.26.82-.577v-2.157c-3.338.726-4.033-1.416-4.033-1.416-.546-1.386-1.332-1.756-1.332-1.756-1.09-.745.083-.73.083-.73 1.205.084 1.84 1.237 1.84 1.237 1.07 1.832 2.807 1.303 3.492.996.108-.774.418-1.303.76-1.602-2.665-.3-5.466-1.332-5.466-5.93 0-1.311.468-2.382 1.237-3.222-.124-.302-.536-1.52.118-3.163 0 0 1.008-.322 3.3 1.23a11.516 11.516 0 0 1 3.002-.403 11.486 11.486 0 0 1 3.002.403c2.292-1.552 3.3-1.23 3.3-1.23.654 1.644.242 2.861.118 3.163.77.84 1.236 1.911 1.236 3.222 0 4.61-2.807 5.627-5.48 5.922.43.372.812 1.103.812 2.222v3.293c0 .321.218.694.825.576C20.565 21.796 24 17.3 24 12 24 5.373 18.627 0 12 0z"/>
                   </svg>
                   View source
                </a>
            </div>
        `;
        toc.appendChild(sourceLink);
    }
});
</script>
```
